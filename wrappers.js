(self["webpackChunkreact_admin_kit"]=self["webpackChunkreact_admin_kit"]||[]).push([[275],{22231:function(e,n,t){"use strict";t.d(n,{m:function(){return r.m}});var r=t(9684);t(72255)},55496:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return Je}});var r=t(13378),i=t(67294),o=JSON.parse('{"menus":{"en-US":{"*":[{"path":"/","title":"\u7b80\u4ecb","meta":{"order":0}},{"title":"\u6838\u5fc3\u7ec4\u4ef6","path":"/core-components","meta":{"order":1},"children":[{"path":"/core-components/schema-form","title":"SchemaForm - JSON \u8868\u5355","meta":{"order":1}},{"path":"/core-components/modal-form","title":"ModalForm - \u5f39\u7a97\u8868\u5355","meta":{}},{"path":"/core-components/pro-table","title":"ProTable - \u9ad8\u7ea7\u8868\u683c","meta":{}}]},{"title":"\u884d\u751f\u7ec4\u4ef6","path":"/components","meta":{"order":2},"children":[{"path":"/components/business-select","title":"BusinessSelect - \u4e1a\u52a1\u4e0b\u62c9","meta":{"order":1}},{"path":"/components/business-tree-select","title":"BusinessTreeSelect - \u4e1a\u52a1\u6811\u4e0b\u62c9","meta":{"order":2}},{"path":"/components/button","title":"Button - \u6309\u94ae","meta":{"order":3}},{"path":"/components/link-button","title":"LinkButton - \u94fe\u63a5\u6309\u94ae","meta":{"order":4}},{"path":"/components/form-upload","title":"FormUpload - \u8868\u5355\u4e0a\u4f20","meta":{"order":5}}]},{"title":"\u9ed8\u8ba4\u8bbe\u7f6e","path":"/setting-provider","meta":{"__fallback":true},"children":[{"path":"/setting-provider","title":"SettingProvider - \u7ec4\u4ef6\u9ed8\u8ba4\u8bbe\u7f6e","meta":{}}]}]}},"locales":[{"name":"en-US","label":"English"}],"navs":{},"title":"React Admin Kit","logo":"https://jaykou25.github.io/react-admin-kit/logo.png","mode":"doc","repository":{"url":"https://github.com/jaykou25/react-admin-kit","branch":"master"},"theme":{}}'),a=t(99829),s=t(68699),l=t(60535),d="import { BusinessSelectBuilder, SchemaForm } from 'react-admin-kit';\nimport { queryBrand, queryColor, queryUser } from './query';\n\n// \u65b9\u4fbfts\u63d0\u793a\ntype SelectType = 'color' | 'brand';\n\nexport const BusinessSelect = BusinessSelectBuilder<SelectType>({\n  apis: [\n    {\n      api: queryColor,\n      type: 'color',\n      pagination: false,\n    },\n    {\n      api: queryBrand,\n      type: 'brand',\n      pagination: true,\n    },\n    {\n      api: queryUser,\n      type: 'user',\n    },\n  ],\n  defaultProps: {\n    placeholder: '\u8bf7\u9009\u62e9',\n  },\n});\n\nconst Basic = () => {\n  return (\n    <div>\n      <SchemaForm\n        grid\n        colProps={{ span: 8 }}\n        onFinish={(values) => console.log({ values })}\n        autoFocusFirstInput={false}\n        submitter={{}}\n        columns={[\n          {\n            title: '\u989c\u8272-\u4e0d\u5206\u9875',\n            dataIndex: 'color',\n            renderFormItem: () => {\n              return <BusinessSelect type=\"color\" placeholder=\"\u8bf7\u9009\u62e9\u989c\u8272\" />;\n            },\n          },\n          {\n            title: '\u54c1\u724c-\u5206\u9875(\u5e26\u641c\u7d22)',\n            dataIndex: 'brand',\n            renderFormItem: () => (\n              <BusinessSelect labelInValue type=\"brand\" placeholder=\"\u8bf7\u9009\u62e9\u54c1\u724c\" />\n            ),\n          },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default Basic;",u="export const queryColor = () => {\n  return new Promise((resolve) => {\n    console.log('queryColor only once');\n    setTimeout(() => {\n      resolve({\n        data: [\n          { name: '\u7ea2', id: 1 },\n          { name: '\u7eff', id: 2 },\n        ],\n      });\n    }, 1000);\n  });\n};\n\nexport const queryBrand = (params) => {\n  console.log('qeryBrand', { params });\n  const data: any = [];\n  const brands = ['\u82f9\u679c', '\u8c37\u6b4c', '\u534e\u4e3a', '\u5c0f\u7c73', '\u8682\u8681'];\n\n  if (params.searchValue) {\n    data.push({ name: params.searchValue, id: -Math.random() });\n  } else {\n    for (let i = 0; i < 10; i++) {\n      const index = i % 5;\n      data.push({ name: brands[index], id: Math.random() });\n    }\n  }\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        data,\n        total: 30,\n      });\n    }, 500);\n  });\n};\n\nexport const queryUser = (params) => {\n  return new Promise((resolve) => {\n    console.log('queryUser', params);\n    if (params.type == 1) {\n      return setTimeout(() => {\n        resolve({\n          data: [{ name: 'A', id: 1 }],\n        });\n      }, 500);\n    }\n\n    if (params.type == 2) {\n      return setTimeout(() => {\n        resolve({\n          data: [{ name: 'B', id: 2 }],\n        });\n      }, 600);\n    }\n\n    return setTimeout(() => {\n      resolve({\n        data: [\n          { name: 'A', id: 1 },\n          { name: 'B', id: 2 },\n          { name: 'C', id: 3 },\n        ],\n      });\n    }, 800);\n  });\n};",c="import { SchemaForm } from 'react-admin-kit';\r\nimport { BusinessSelect } from '../basic';\r\n\r\nconst OneQuery = () => {\r\n  return (\r\n    <div>\r\n      <SchemaForm\r\n        grid\r\n        colProps={{ span: 8 }}\r\n        onFinish={(values) => console.log({ values })}\r\n        autoFocusFirstInput={false}\r\n        columns={[\r\n          {\r\n            title: '\u989c\u8272',\r\n            renderFormItem: () => <BusinessSelect type=\"color\" />,\r\n          },\r\n          {\r\n            title: '\u989c\u82722',\r\n            renderFormItem: () => <BusinessSelect type=\"color\" />,\r\n          },\r\n          {\r\n            title: '\u989c\u82723',\r\n            renderFormItem: () => <BusinessSelect type=\"color\" />,\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OneQuery;",m="import { SchemaForm } from 'react-admin-kit';\nimport { BusinessSelect } from '../basic';\n\nconst QueryParams = () => {\n  return (\n    <div>\n      <SchemaForm\n        grid\n        colProps={{ span: 8 }}\n        autoFocusFirstInput={false}\n        columns={[\n          {\n            title: '\u4eba\u5458\u6240\u6709',\n            renderFormItem: () => <BusinessSelect type=\"user\" />,\n          },\n          {\n            title: '\u4eba\u5458A',\n            renderFormItem: () => <BusinessSelect type=\"user\" queryParams={{ type: 1 }} />,\n          },\n          {\n            title: '\u4eba\u5458B',\n            renderFormItem: () => <BusinessSelect type=\"user\" queryParams={{ type: 2 }} />,\n          },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default QueryParams;",p="import { ModalForm, Button, clearSelectCache } from 'react-admin-kit';\nimport { BusinessSelect } from '../basic';\nimport { useRef } from 'react';\n\nconst QueryParams = () => {\n  const innerRef = useRef();\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => innerRef.current?.openModal('new')}>\n        \u6253\u5f00\u5f39\u7a97\n      </Button>\n\n      <Button style={{ marginLeft: '10px' }} onClick={() => clearSelectCache('user')}>\n        \u6e05\u9664\u7f13\u5b58\n      </Button>\n\n      <ModalForm\n        innerRef={innerRef}\n        columns={[\n          {\n            title: '\u4eba\u5458\u6240\u6709',\n            renderFormItem: () => <BusinessSelect type=\"user\" />,\n          },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default QueryParams;",f="import { BusinessTreeSelectBuilder, SchemaForm } from 'react-admin-kit';\nimport { queryCompany, queryDept } from './query';\n\n// \u65b9\u4fbfts\u63d0\u793a\ntype TreeSelectType = 'company' | 'dept';\n\nexport const BusinessTreeSelect = BusinessTreeSelectBuilder<TreeSelectType>({\n  apis: [\n    {\n      api: queryCompany,\n      type: 'company',\n    },\n    {\n      api: queryDept,\n      type: 'dept',\n    },\n  ],\n});\n\nconst Basic = () => {\n  return (\n    <SchemaForm\n      grid\n      colProps={{ span: 8 }}\n      onFinish={(values) => console.log({ values })}\n      autoFocusFirstInput={false}\n      columns={[\n        {\n          title: '\u516c\u53f8',\n          dataIndex: 'company',\n          renderFormItem: () => <BusinessTreeSelect type=\"company\" />,\n        },\n        {\n          valueType: 'dependency',\n          name: ['company'],\n          columns: ({ company }) => {\n            if (company) {\n              return [\n                {\n                  title: '\u90e8\u95e8',\n                  dataIndex: 'dept',\n                  renderFormItem: () => (\n                    <BusinessTreeSelect queryParams={{ id: company }} type=\"dept\" />\n                  ),\n                },\n              ];\n            } else {\n              return [\n                {\n                  title: '\u90e8\u95e8',\n                  dataIndex: 'dept',\n                  fieldProps: { disabled: true, placeholder: '\u8bf7\u9009\u62e9\u516c\u53f8' },\n                },\n              ];\n            }\n          },\n        },\n      ]}\n    />\n  );\n};\n\nexport default Basic;",h="export const queryCompany = () => {\n  return new Promise((resolve) => {\n    console.log('queryOrg only once');\n    setTimeout(() => {\n      resolve([\n        {\n          name: '\u96c6\u56e2\u516c\u53f8',\n          id: 1,\n          children: [\n            {\n              name: '\u4e1a\u52a1\u516c\u53f81',\n              id: 2,\n            },\n            {\n              name: '\u4e1a\u52a1\u516c\u53f82',\n              id: 3,\n            },\n          ],\n        },\n        { name: '\u5176\u5b83\u516c\u53f8', id: -1 },\n      ]);\n    }, 1000);\n  });\n};\n\nexport const queryDept = (params) => {\n  return new Promise((resolve) => {\n    console.log('queryDept', params);\n    setTimeout(() => {\n      if (params.id == 1) {\n        console.log('in');\n        resolve([\n          { name: '\u603b\u7ecf\u7406\u5ba4', id: 1 },\n          {\n            name: '\u9500\u552e\u90e8',\n            id: 2,\n            children: [\n              { name: '\u9500\u552e\u90e81', id: 3 },\n              { name: '\u9500\u552e\u90e82', id: 4 },\n            ],\n          },\n        ]);\n      } else {\n        resolve([\n          {\n            name: '\u90e8\u95e81',\n            id: 1,\n            children: [\n              {\n                name: '\u5b50\u90e8\u95e81',\n                id: 2,\n              },\n              {\n                name: '\u5b50\u90e8\u95e82',\n                id: 3,\n              },\n            ],\n          },\n          { name: '\u90e8\u95e82', id: -1 },\n        ]);\n      }\n    }, 1000);\n  });\n};",g="import { ModalForm, Button, clearTreeSelectCache } from 'react-admin-kit';\nimport { BusinessTreeSelect } from '../basic';\nimport { useRef } from 'react';\n\nconst ClearCacheDemo = () => {\n  const innerRef = useRef();\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => innerRef.current?.openModal('new')}>\n        \u6253\u5f00\u5f39\u7a97\n      </Button>\n\n      <Button style={{ marginLeft: '10px' }} onClick={() => clearTreeSelectCache('company')}>\n        \u6e05\u9664\u7f13\u5b58\n      </Button>\n      <ModalForm\n        innerRef={innerRef}\n        onFinish={(values) => console.log({ values })}\n        columns={[\n          {\n            title: '\u516c\u53f8',\n            dataIndex: 'company',\n            renderFormItem: () => <BusinessTreeSelect type=\"company\" />,\n          },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default ClearCacheDemo;",y="import { Button } from 'react-admin-kit';\r\nimport { Space } from 'antd';\r\nimport { useState } from 'react';\r\n\r\nconst Basic = () => {\r\n  const [visible, setVisible] = useState(true);\r\n  return (\r\n    <div>\r\n      <Button onClick={() => setVisible(!visible)}>\u5207\u6362</Button>\r\n\r\n      <div style={{ marginTop: '20px' }}>\r\n        <Space>\r\n          <Button visible={visible} type=\"primary\">\r\n            \u6743\u9650\u6309\u94ae\r\n          </Button>\r\n          <Button visible={() => visible} danger type=\"primary\">\r\n            \u6743\u9650\u6309\u94ae2\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Basic;",v="import { useRef } from 'react';\nimport { SchemaForm, FormUpload, LinkButton, Button } from 'react-admin-kit';\n\nconst Basic = () => {\n  const formRef = useRef<any>();\n\n  const onFinish = (values) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        formRef={formRef}\n        columns={[\n          {\n            title: '\u9644\u4ef6',\n            dataIndex: 'files',\n            renderFormItem: () => (\n              <FormUpload\n                action=\"https://mock.apifox.cn/m1/1864670-0-default/mockUpload\"\n                // \u4ec5\u7528\u4e8e\u793a\u8303, \u4e00\u822c\u5728\u5168\u5c40\u8bbe\u7f6e. \u53ef\u5c06\u670d\u52a1\u7aef\u8fd4\u56de\u503c\u5408\u5e76\u8fdb\u6587\u4ef6\u5217\u8868\n                responseToFileList={(res) => ({ id: res.data?.id })}\n              >\n                <LinkButton>\u4e0a\u4f20\u9644\u4ef6</LinkButton>\n              </FormUpload>\n            ),\n          },\n        ]}\n        onFinish={onFinish}\n      />\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Basic;",b="import { message } from 'antd';\nimport { useRef } from 'react';\nimport { SchemaForm, FormUpload, LinkButton, Button } from 'react-admin-kit';\n\nimport 'antd/dist/antd.min.css';\n\nconst ErrorHandle = () => {\n  const formRef = useRef<any>();\n\n  const onFinish = (values) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        formRef={formRef}\n        columns={[\n          {\n            title: '\u9644\u4ef6',\n            dataIndex: 'files',\n            transfer: () => ({}),\n            renderFormItem: () => (\n              <FormUpload\n                action=\"https://mock.apifox.cn/m1/1864670-0-default/mockUploadFailed\"\n                // \u4ec5\u7528\u4e8e\u793a\u8303, \u4e00\u822c\u5728\u5168\u5c40\u8bbe\u7f6e.\n                errorHandle={(res) => message.error('\u4e0a\u4f20\u5931\u8d25 ' + res.message)}\n              >\n                <LinkButton>\u4e0a\u4f20\u9644\u4ef6</LinkButton>\n              </FormUpload>\n            ),\n          },\n        ]}\n        onFinish={onFinish}\n      />\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ErrorHandle;",x="import { useRef } from 'react';\nimport { SchemaForm, FormUpload, LinkButton, Button } from 'react-admin-kit';\n\nconst Show = () => {\n  const formRef = useRef<any>();\n\n  const onFinish = (values) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        formRef={formRef}\n        initialValues={{\n          files: [\n            {\n              name: '\u7167\u72471',\n              url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n            },\n            {\n              name: '\u7167\u72472',\n              url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n            },\n          ],\n        }}\n        columns={[\n          {\n            title: '\u9644\u4ef6',\n            dataIndex: 'files',\n            renderFormItem: () => (\n              <FormUpload\n                action=\"https://mock.apifox.cn/m1/1864670-0-default/mockUpload\"\n                // \u4ec5\u7528\u4e8e\u793a\u8303, \u4e00\u822c\u5728\u5168\u5c40\u8bbe\u7f6e. \u53ef\u5c06\u670d\u52a1\u7aef\u8fd4\u56de\u503c\u5408\u5e76\u8fdb\u6587\u4ef6\u5217\u8868\n                listType=\"picture-card\"\n              >\n                <LinkButton>\u4e0a\u4f20\u9644\u4ef6</LinkButton>\n              </FormUpload>\n            ),\n          },\n        ]}\n        onFinish={onFinish}\n      />\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Show;",F="import { useEffect, useRef } from 'react';\nimport { SchemaForm, FormUpload, LinkButton, Button } from 'react-admin-kit';\n\nconst DataSubmit = () => {\n  const formRef = useRef<any>();\n\n  const onFinish = (values) => {\n    console.log({ values });\n  };\n\n  useEffect(() => {\n    // \u6a21\u62df\u540e\u7aef\u8fd4\u56de\n    formRef.current?.setFieldsValue({\n      fileList: [\n        {\n          id: 1,\n          fileName: '\u7167\u72471',\n          filePath: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n        },\n        {\n          id: 2,\n          fileName: '\u7167\u72472',\n          filePath: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n        },\n      ],\n    });\n  }, []);\n\n  return (\n    <div>\n      <SchemaForm\n        formRef={formRef}\n        columns={[\n          {\n            title: '\u9644\u4ef6',\n            dataIndex: 'fileList',\n            convertValue: (vals) => {\n              if (vals) {\n                return vals.map((val) => ({ ...val, name: val.fileName, url: val.filePath }));\n              }\n\n              return vals;\n            },\n            transform: (files) => ({ fileIds: files.map((file) => file.id).join(',') }),\n            renderFormItem: () => (\n              <FormUpload\n                action=\"https://mock.apifox.cn/m1/1864670-0-default/mockUpload\"\n                // \u4ec5\u7528\u4e8e\u793a\u8303, \u4e00\u822c\u5728\u5168\u5c40\u8bbe\u7f6e. \u53ef\u5c06\u670d\u52a1\u7aef\u8fd4\u56de\u503c\u5408\u5e76\u8fdb\u6587\u4ef6\u5217\u8868\n                responseToFileList={(res) => res.data}\n              >\n                <LinkButton>\u4e0a\u4f20\u9644\u4ef6</LinkButton>\n              </FormUpload>\n            ),\n          },\n        ]}\n        onFinish={onFinish}\n      />\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSubmit;",R="import { useEffect, useRef } from 'react';\nimport { SchemaForm, FormUpload, LinkButton, Button, SettingProvider } from 'react-admin-kit';\n\nconst ChangeKey = () => {\n  const formRef = useRef<any>();\n\n  const onFinish = (values) => {\n    console.log({ values });\n  };\n\n  useEffect(() => {\n    // \u6a21\u62df\u8bf7\u6c42\n    formRef.current?.setFieldsValue({\n      fileList: [\n        {\n          id: 1,\n          fileName: '\u7167\u72471',\n          filePath: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n        },\n        {\n          id: 2,\n          fileName: '\u7167\u72472',\n          filePath: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n        },\n      ],\n    });\n  }, []);\n\n  return (\n    <SettingProvider\n      formUploadSetting={{\n        nameKey: 'fileName',\n        urlKey: 'filePath',\n      }}\n    >\n      <SchemaForm\n        formRef={formRef}\n        columns={[\n          {\n            title: '\u9644\u4ef6',\n            dataIndex: 'fileList',\n            transform: (files) => ({ fileIds: files.map((file) => file.id).join(',') }),\n            renderFormItem: () => (\n              <FormUpload\n                action=\"https://mock.apifox.cn/m1/1864670-0-default/mockUpload\"\n                // \u4ec5\u7528\u4e8e\u793a\u8303, \u4e00\u822c\u5728\u5168\u5c40\u8bbe\u7f6e. \u53ef\u5c06\u670d\u52a1\u7aef\u8fd4\u56de\u503c\u5408\u5e76\u8fdb\u6587\u4ef6\u5217\u8868\n                responseToFileList={(res) => res.data}\n              >\n                <LinkButton>\u4e0a\u4f20\u9644\u4ef6</LinkButton>\n              </FormUpload>\n            ),\n          },\n        ]}\n        onFinish={onFinish}\n      />\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </SettingProvider>\n  );\n};\n\nexport default ChangeKey;",P="import { LinkButton } from 'react-admin-kit';\r\nimport { Space } from 'antd';\r\n\r\nconst Basic = () => {\r\n  return (\r\n    <div style={{ backgroundColor: '#e6f4ff', padding: '10px' }}>\r\n      <Space size={'middle'}>\r\n        <LinkButton>\u7f16\u8f91</LinkButton>\r\n        <LinkButton loading>\u7f16\u8f91</LinkButton>\r\n        <LinkButton disabled>\u7f16\u8f91</LinkButton>\r\n        <LinkButton danger>\u5220\u9664</LinkButton>\r\n      </Space>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Basic;",T="import { ModalForm, Button } from 'react-admin-kit';\nimport { columns } from './columns';\nimport { useState } from 'react';\n\nconst Basic = () => {\n  const [open, setOpen] = useState(false);\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <div style={{ textAlign: 'start' }}>\n        <Button type=\"primary\" onClick={() => setOpen(true)}>\n          \u6253\u5f00\u5f39\u7a97\n        </Button>\n      </div>\n\n      <ModalForm\n        title={'\u57fa\u672c\u8868\u5355'}\n        open={open}\n        onCancel={() => setOpen(false)}\n        onFinish={onFinish}\n        columns={columns}\n      />\n    </div>\n  );\n};\n\nexport default Basic;",w="export const columns = [\r\n  {\r\n    title: '\u5e8f\u53f7',\r\n    valueType: 'index',\r\n    width: 48,\r\n  },\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'username',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u6635\u79f0',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u6635\u79f0\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n    dataIndex: 'nickName',\r\n  },\r\n  {\r\n    title: '\u6027\u522b',\r\n    dataIndex: 'sex',\r\n    valueEnum: {\r\n      \u7537: { text: '\u7537' },\r\n      \u5973: { text: '\u5973' },\r\n    },\r\n  },\r\n  {\r\n    title: '\u8eab\u4efd\u8bc1\u53f7',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u8eab\u4efd\u8bc1\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n    dataIndex: 'idNumber',\r\n  },\r\n];",I="import { ModalForm, Button } from 'react-admin-kit';\nimport { columns } from './columns';\nimport { useState } from 'react';\n\nconst MultipleCol = () => {\n  const [open, setOpen] = useState(false);\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <div style={{ textAlign: 'start' }}>\n        <Button type=\"primary\" onClick={() => setOpen(true)}>\n          \u6253\u5f00\u5f39\u7a97\n        </Button>\n      </div>\n\n      <ModalForm\n        width={600}\n        title={'\u591a\u5217\u6392\u5e03'}\n        open={open}\n        onCancel={() => setOpen(false)}\n        onFinish={onFinish}\n        columns={columns}\n        formProps={{\n          grid: true,\n          rowProps: { gutter: [24, 0] },\n          colProps: { span: 12 },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default MultipleCol;",k="export const columns = [\r\n  {\r\n    title: '\u5e8f\u53f7',\r\n    valueType: 'index',\r\n    width: 48,\r\n  },\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'username',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n  },\r\n  {\r\n    title: '\u6635\u79f0',\r\n    dataIndex: 'nickName',\r\n  },\r\n  {\r\n    title: '\u5e74\u9f84',\r\n    dataIndex: 'age',\r\n  },\r\n  {\r\n    title: '\u804c\u4e1a',\r\n    dataIndex: 'profession',\r\n  },\r\n  {\r\n    title: '\u7231\u597d',\r\n    dataIndex: 'hobby',\r\n  },\r\n  {\r\n    title: '\u6027\u522b',\r\n    dataIndex: 'sex',\r\n    valueEnum: {\r\n      \u7537: { text: '\u7537' },\r\n      \u5973: { text: '\u5973' },\r\n    },\r\n  },\r\n  {\r\n    title: '\u8eab\u4efd\u8bc1\u53f7',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u8eab\u4efd\u8bc1\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n    dataIndex: 'idNumber',\r\n  },\r\n];",E="import { ModalForm, Button } from 'react-admin-kit';\nimport { columns } from './columns';\nimport { useState } from 'react';\n\nconst LongForm = () => {\n  const [open, setOpen] = useState(false);\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <div style={{ textAlign: 'start' }}>\n        <Button type=\"primary\" onClick={() => setOpen(true)}>\n          \u6253\u5f00\u5f39\u7a97\n        </Button>\n      </div>\n\n      <ModalForm\n        title={'\u957f\u8868\u5355\u9a8c\u8bc1'}\n        open={open}\n        onCancel={() => setOpen(false)}\n        onFinish={onFinish}\n        columns={columns}\n      />\n    </div>\n  );\n};\n\nexport default LongForm;",C="export const columns = [\r\n  {\r\n    title: '\u5e8f\u53f7',\r\n    valueType: 'index',\r\n    width: 48,\r\n  },\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'username',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n  },\r\n  {\r\n    title: '\u6635\u79f0',\r\n    dataIndex: 'nickName',\r\n  },\r\n  {\r\n    title: '\u5e74\u9f84',\r\n    dataIndex: 'age',\r\n  },\r\n  {\r\n    title: '\u804c\u4e1a',\r\n    dataIndex: 'profession',\r\n  },\r\n  {\r\n    title: '\u7231\u597d',\r\n    dataIndex: 'hobby',\r\n  },\r\n  {\r\n    title: '\u6027\u522b',\r\n    dataIndex: 'sex',\r\n    valueEnum: {\r\n      \u7537: { text: '\u7537' },\r\n      \u5973: { text: '\u5973' },\r\n    },\r\n  },\r\n  {\r\n    title: '\u8eab\u4efd\u8bc1\u53f7',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u8eab\u4efd\u8bc1\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n    dataIndex: 'idNumber',\r\n  },\r\n];",M="import { ModalForm, Button } from 'react-admin-kit';\nimport { columns } from './columns';\nimport { useRef } from 'react';\n\nimport type { ModalFormInnerRefType } from 'react-admin-kit';\n\nconst InnerRefDemo = () => {\n  const ref = useRef<ModalFormInnerRefType>();\n\n  const onFinish = (values: any, formType, formData) => {\n    console.log({ formType, values, formData });\n  };\n\n  return (\n    <div>\n      <div style={{ textAlign: 'start' }}>\n        <Button\n          type=\"primary\"\n          onClick={() => ref.current?.openModal('new', { username: '\u738b\u5148\u751f', phone: 134 })}\n        >\n          \u6253\u5f00\u5f39\u7a97\n        </Button>\n      </div>\n\n      <ModalForm innerRef={ref} title={'\u57fa\u672c\u8868\u5355\u975e\u53d7\u63a7'} onFinish={onFinish} columns={columns} />\n    </div>\n  );\n};\n\nexport default InnerRefDemo;",H="export const columns = [\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'username',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n];",S="import { ModalForm } from 'react-admin-kit';\nimport type { ModalFormInnerRefType } from 'react-admin-kit';\nimport { Button, Space } from 'antd';\nimport { columns } from './columns';\nimport { useRef, useState } from 'react';\n\nconst OnOpenDemo = () => {\n  const innerRef = useRef<ModalFormInnerRefType>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  const handleOnOpen = async (formType, formRef) => {\n    if (formType === 'edit' || formType === 'read') {\n      return requestData().then(() => {\n        // \u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528setFieldsValue()\u662f\u4e0d\u60f3\u5f15\u8d77field touched.\n        // ModalForm\u7684\u5c5e\u6027confirmOnClose\u9ed8\u8ba4\u662ftrue\n        formRef.current?.setFields([\n          {\n            name: 'username',\n            value: '\u738b\u5148\u751f',\n            touched: false,\n          },\n          {\n            name: 'phone',\n            value: '15800018888',\n            touched: false,\n          },\n        ]);\n      });\n    }\n  };\n\n  const requestData = () => {\n    return new Promise((resolve) => {\n      setTimeout(resolve, 1000);\n    });\n  };\n\n  return (\n    <div>\n      <Space>\n        <Button type=\"primary\" onClick={() => innerRef.current?.openModal('new')}>\n          \u65b0\u589e\n        </Button>\n\n        <Button type=\"primary\" onClick={() => innerRef.current?.openModal('edit')}>\n          \u7f16\u8f91\n        </Button>\n\n        <Button type=\"primary\" onClick={() => innerRef.current?.openModal('read')}>\n          \u67e5\u770b\n        </Button>\n      </Space>\n\n      <ModalForm\n        title={'\u57fa\u672c\u8868\u5355'}\n        innerRef={innerRef}\n        onFinish={onFinish}\n        columns={columns}\n        onOpen={handleOnOpen}\n      />\n    </div>\n  );\n};\n\nexport default OnOpenDemo;",B="export const columns = [\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'username',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n];",L="import { ModalForm } from 'react-admin-kit';\nimport { Button } from 'antd';\nimport { getColumns } from './columns';\nimport { useRef, useState } from 'react';\n\nconst InitValueDemo = () => {\n  const innerRef = useRef<any>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <div style={{ textAlign: 'start' }}>\n        <Button type=\"primary\" onClick={() => innerRef.current.openModal()}>\n          \u6253\u5f00\u5f39\u7a97\n        </Button>\n      </div>\n\n      <ModalForm\n        title={'\u57fa\u672c\u8868\u5355'}\n        innerRef={innerRef}\n        onFinish={onFinish}\n        columns={getColumns()}\n        formProps={{ initialValues: { showPhone: 0 } }}\n      />\n    </div>\n  );\n};\n\nexport default InitValueDemo;",q="import { Select } from 'antd';\n\nexport const getColumns = () => [\n  {\n    title: '\u662f\u5426\u663e\u793a\u7535\u8bdd',\n    dataIndex: 'showPhone',\n    renderFormItem: () => (\n      <Select\n        options={[\n          { label: '\u662f', value: 1 },\n          { label: '\u5426', value: 0 },\n        ]}\n      />\n    ),\n  },\n  {\n    valueType: 'dependency',\n    name: ['showPhone'],\n    columns: ({ showPhone }) => {\n      if (showPhone) {\n        return [\n          {\n            title: '\u7535\u8bdd',\n            dataIndex: 'phone',\n          },\n        ];\n      } else {\n        return [];\n      }\n    },\n  },\n];",D="import { ModalForm } from 'react-admin-kit';\nimport { Button } from 'antd';\nimport { columns } from './columns';\nimport { useRef, useState } from 'react';\n\nconst ReadonlyDemo = () => {\n  const ref = useRef();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <div style={{ textAlign: 'start' }}>\n        <Button\n          type=\"primary\"\n          onClick={() => ref.current?.openModal('read', { username: '\u738b\u5148\u751f', phone: 134 })}\n        >\n          \u6253\u5f00\u5f39\u7a97\n        </Button>\n      </div>\n\n      <ModalForm innerRef={ref} title={'\u57fa\u672c\u8868\u5355\u975e\u53d7\u63a7'} onFinish={onFinish} columns={columns} />\n    </div>\n  );\n};\n\nexport default ReadonlyDemo;",A="export const columns = [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'username',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n];",Z="import { ModalForm } from 'react-admin-kit';\nimport type { ModalFormInnerRefType } from 'react-admin-kit';\nimport { Button, Space } from 'antd';\nimport { columns } from './columns';\nimport { useRef, useState } from 'react';\n\nconst OnFinishDemo = () => {\n  const innerRef = useRef<ModalFormInnerRefType>();\n\n  const onFinish = (values: any, formType, formData) => {\n    console.log({ values, formType, formData });\n  };\n\n  return (\n    <div>\n      <Space>\n        <Button type=\"primary\" onClick={() => innerRef.current?.openModal('new')}>\n          \u65b0\u589e\n        </Button>\n\n        <Button\n          type=\"primary\"\n          onClick={() =>\n            innerRef.current?.openModal('edit', {\n              id: '1',\n              username: '\u738b\u5148\u751f',\n              phone: '15800018888',\n            })\n          }\n        >\n          \u7f16\u8f91\n        </Button>\n      </Space>\n\n      <ModalForm title={'\u57fa\u672c\u8868\u5355'} innerRef={innerRef} onFinish={onFinish} columns={columns} />\n    </div>\n  );\n};\n\nexport default OnFinishDemo;",N="export const columns = [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'username',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n];",U="import { ModalForm } from 'react-admin-kit';\nimport type { ModalFormInnerRefType } from 'react-admin-kit';\nimport { Button, Space } from 'antd';\nimport { columns } from './columns';\nimport { useRef } from 'react';\n\nconst ConventionDemo = () => {\n  const innerRef = useRef<ModalFormInnerRefType>();\n\n  const onFinish = (values: any, formType, formData) => {\n    console.log({ values, formType, formData });\n  };\n\n  return (\n    <div>\n      <Space>\n        <Button\n          type=\"primary\"\n          onClick={() =>\n            innerRef.current?.openModal('edit', {\n              id: '1',\n              name: 'tom',\n              deptId: '3',\n              deptName: '\u9500\u552e\u90e8',\n              isMember: 1,\n              gradeId: '2',\n              gradeName: 'B',\n            })\n          }\n        >\n          \u7f16\u8f91\n        </Button>\n      </Space>\n\n      <ModalForm title={'\u57fa\u672c\u8868\u5355'} innerRef={innerRef} onFinish={onFinish} columns={columns} />\n    </div>\n  );\n};\n\nexport default ConventionDemo;",O="import type { ProColumnType } from 'react-admin-kit';\n\nexport const columns: ProColumnType[] = [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n  },\n  {\n    title: '\u90e8\u95e8',\n    dataIndex: 'deptId,deptName',\n    valueType: 'treeSelect',\n    width: 'sm',\n    fieldProps: {\n      placeholder: '\u8bf7\u9009\u62e9',\n      labelInValue: true,\n      options: [\n        {\n          value: '1',\n          label: 'A\u516c\u53f8',\n          children: [\n            { value: '2', label: '\u6280\u672f\u90e8' },\n            { value: '3', label: '\u9500\u552e\u90e8' },\n          ],\n        },\n      ],\n    },\n  },\n  {\n    title: '\u4f1a\u5458',\n    dataIndex: 'isMember',\n    valueType: 'radio',\n    fieldProps: {\n      options: [\n        { label: '\u5426', value: 0 },\n        { label: '\u662f', value: 1 },\n      ],\n    },\n  },\n  {\n    valueType: 'dependency',\n    name: ['isMember'],\n    columns: ({ isMember }) => {\n      if (isMember) {\n        return [\n          {\n            title: '\u4f1a\u5458\u7b49\u7ea7',\n            dataIndex: 'gradeId,gradeName',\n            valueType: 'select',\n            fieldProps: {\n              labelInValue: true,\n              options: [\n                { value: '1', label: 'A' },\n                { value: '2', label: 'B' },\n              ],\n            },\n          },\n        ];\n      }\n\n      return [];\n    },\n  },\n];",V="import { ProTable } from 'react-admin-kit';\r\nimport { useRef } from 'react';\r\nimport { Button, message } from 'antd';\r\nimport { delelteRecord, mockRequest } from './apis';\r\n\r\nimport 'antd/dist/antd.min.css';\r\nimport { getColumns } from './columns';\r\n\r\nexport const FORM_TYPE_MAP = {\r\n  new: '\u65b0\u589e',\r\n  edit: '\u7f16\u8f91',\r\n  read: '\u67e5\u770b',\r\n};\r\n\r\nconst Basic = () => {\r\n  const innerRef = useRef<any>();\r\n  const actionRef = useRef<any>();\r\n\r\n  const onFinish = (values: any, type) => {\r\n    console.log({ values });\r\n    // \u6a21\u62df\u8bf7\u6c42\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(true);\r\n\r\n        message.success(FORM_TYPE_MAP[type] + '\u6210\u529f');\r\n        actionRef.current?.reload();\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ProTable\r\n        name=\"\u7528\u6237\"\r\n        columns={getColumns()}\r\n        innerRef={innerRef}\r\n        actionRef={actionRef}\r\n        request={mockRequest}\r\n        onFinish={onFinish}\r\n        bordered\r\n        toolbar={{\r\n          actions: [\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => {\r\n                innerRef.current?.openModal();\r\n              }}\r\n            >\r\n              \u65b0\u589e\r\n            </Button>,\r\n          ],\r\n        }}\r\n        rowSelection={{}}\r\n        delFunction={delelteRecord}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Basic;",_="export const mockRequest = () => {\n  return new Promise((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          data: [\n            { id: 1, name: 'Jack', phone: 133 },\n            { id: 2, name: 'Tom', phone: 155 },\n          ],\n        }),\n      1000,\n    );\n  });\n};\n\nexport const delelteRecord = (ids) => {\n  return new Promise((resolve) => {\n    console.log('delete record', ids);\n    setTimeout(() => resolve(true), 500);\n  });\n};\n\nexport const mockRequestForExport = () => {\n  return new Promise((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          data: [\n            {\n              id: 1,\n              name: 'Jack',\n              birthday: 1667375314278,\n              sex: 'man',\n              type: '1',\n              range: [1667375314278, 1667375314278],\n              status: '1',\n              createTime: 1667375314278,\n            },\n          ],\n        }),\n      1000,\n    );\n  });\n};\n\nexport const mockRequestForRenderText = () => {\n  return new Promise((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          data: [\n            {\n              id: 1,\n              name: '\u8fd9\u662f\u4e00\u4e2a\u5f88\u957f\u7684\u7528\u6237\u540d',\n              phone: 15881234567,\n            },\n          ],\n        }),\n      500,\n    );\n  });\n};",j="import { LinkButton } from 'react-admin-kit';\r\nimport type { ProColumnType } from 'react-admin-kit';\r\n\r\nexport const getColumns = (): ProColumnType[] => [\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'name',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n  },\r\n  {\r\n    title: '\u6635\u79f0',\r\n    dataIndex: 'nickName',\r\n    hideInSearch: true,\r\n  },\r\n  {\r\n    title: '\u6027\u522b',\r\n    dataIndex: 'sex',\r\n    formItemProps: {},\r\n    valueEnum: {\r\n      \u7537: { text: '\u7537' },\r\n      \u5973: { text: '\u5973' },\r\n    },\r\n  },\r\n  {\r\n    title: '\u8eab\u4efd\u8bc1\u53f7',\r\n    dataIndex: 'idNumber',\r\n    hideInSearch: true,\r\n  },\r\n  {\r\n    title: '\u64cd\u4f5c',\r\n    valueType: 'option',\r\n    enableDelete: true,\r\n    render: (text, record, index, actionRef, innerRef) => [\r\n      <LinkButton key={1} onClick={() => innerRef.current?.openModal('edit', record)}>\r\n        \u7f16\u8f91\r\n      </LinkButton>,\r\n    ],\r\n  },\r\n];",z="import { ProTable } from 'react-admin-kit';\nimport { mockRequestForRenderText } from '../basic/apis';\n\nimport 'antd/dist/antd.min.css';\n\nconst columns = [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n    ellipsis: true,\n    copyable: true,\n    width: 100,\n    render: (dom) => {\n      return (\n        <div>\n          <span style={{ marginRight: '3px' }}>\ud83d\udc68</span>\n          {dom}\n        </div>\n      );\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n    copyable: true,\n    renderText: (text) => {\n      return '+86 ' + text;\n    },\n  },\n];\n\nconst RenderText = () => {\n  return (\n    <div style={{ display: 'flex' }}>\n      <ProTable\n        search={false}\n        pagination={false}\n        noPadding\n        name=\"\u7528\u6237\"\n        columns={columns}\n        request={mockRequestForRenderText}\n        bordered\n      />\n    </div>\n  );\n};\n\nexport default RenderText;",K="import { ProTable } from 'react-admin-kit';\r\nimport { useRef } from 'react';\r\nimport { Button, message } from 'antd';\r\nimport { delelteRecord, mockRequest } from './apis';\r\n\r\nimport 'antd/dist/antd.min.css';\r\nimport { getColumns } from './columns';\r\n\r\nexport const FORM_TYPE_MAP = {\r\n  new: '\u65b0\u589e',\r\n  edit: '\u7f16\u8f91',\r\n  read: '\u67e5\u770b',\r\n};\r\n\r\nconst Basic = () => {\r\n  const innerRef = useRef<any>();\r\n  const actionRef = useRef<any>();\r\n\r\n  const onFinish = (values: any, type) => {\r\n    console.log({ values });\r\n    // \u6a21\u62df\u8bf7\u6c42\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(true);\r\n\r\n        message.success(FORM_TYPE_MAP[type] + '\u6210\u529f');\r\n        actionRef.current?.reload();\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ProTable\r\n        name=\"\u7528\u6237\"\r\n        search={false}\r\n        columns={getColumns()}\r\n        innerRef={innerRef}\r\n        actionRef={actionRef}\r\n        request={mockRequest}\r\n        onFinish={onFinish}\r\n        bordered\r\n        toolbar={{\r\n          actions: [\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => {\r\n                innerRef.current?.openModal();\r\n              }}\r\n            >\r\n              \u65b0\u589e\r\n            </Button>,\r\n          ],\r\n        }}\r\n        rowSelection={{}}\r\n        delFunction={delelteRecord}\r\n        formProps={{\r\n          grid: true,\r\n          rowProps: { gutter: [24, 0] },\r\n          colProps: { span: 12 },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Basic;",Y="export const mockRequest = () => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(\r\n      () =>\r\n        resolve({\r\n          data: [\r\n            { id: 1, name: 'Jack', phone: 133 },\r\n            { id: 2, name: 'Tom', phone: 155 },\r\n          ],\r\n        }),\r\n      1000,\r\n    );\r\n  });\r\n};\r\n\r\nexport const delelteRecord = (ids) => {\r\n  return new Promise((resolve) => {\r\n    console.log('delete record', ids);\r\n    setTimeout(() => resolve(true), 500);\r\n  });\r\n};",W="import { LinkButton } from 'react-admin-kit';\r\nimport type { ProColumnType } from 'react-admin-kit';\r\n\r\nexport const getColumns = (): ProColumnType[] => [\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'name',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n  },\r\n  {\r\n    title: '\u6635\u79f0',\r\n    dataIndex: 'nickName',\r\n    hideInSearch: true,\r\n  },\r\n  {\r\n    title: '\u6027\u522b',\r\n    dataIndex: 'sex',\r\n    formItemProps: {},\r\n    valueEnum: {\r\n      \u7537: { text: '\u7537' },\r\n      \u5973: { text: '\u5973' },\r\n    },\r\n  },\r\n  {\r\n    title: '\u8eab\u4efd\u8bc1\u53f7',\r\n    dataIndex: 'idNumber',\r\n    hideInSearch: true,\r\n  },\r\n  {\r\n    title: '\u64cd\u4f5c',\r\n    valueType: 'option',\r\n    enableDelete: true,\r\n    render: (text, record, index, actionRef, innerRef) => [\r\n      <LinkButton key={1} onClick={() => innerRef.current?.openModal('edit', record)}>\r\n        \u7f16\u8f91\r\n      </LinkButton>,\r\n    ],\r\n  },\r\n];",G="import { ProTable } from 'react-admin-kit';\nimport { useRef } from 'react';\nimport { mockRequest } from './apis';\n\nimport 'antd/dist/antd.min.css';\nimport { getColumns } from './columns';\n\nconst Readonly = () => {\n  const innerRef = useRef<any>();\n\n  return (\n    <div>\n      <ProTable\n        name=\"\u7528\u6237\"\n        search={false}\n        columns={getColumns()}\n        innerRef={innerRef}\n        request={mockRequest}\n        bordered\n        formProps={{ layout: 'horizontal', labelCol: { span: 5 } }}\n      />\n    </div>\n  );\n};\n\nexport default Readonly;",J="export const mockRequest = () => {\n  return new Promise((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          data: [\n            { id: 1, name: 'Jack', nickName: 'Jackiy', phone: 133, sex: '\u7537' },\n            { id: 2, name: 'Tom', phone: 155 },\n          ],\n        }),\n      1000,\n    );\n  });\n};",Q="import { LinkButton } from 'react-admin-kit';\nimport type { ProColumnType } from 'react-admin-kit';\n\nexport const getColumns = (): ProColumnType[] => [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n  },\n  {\n    title: '\u6635\u79f0',\n    dataIndex: 'nickName',\n    hideInSearch: true,\n  },\n  {\n    title: '\u6027\u522b',\n    dataIndex: 'sex',\n    formItemProps: {},\n    valueEnum: {\n      \u7537: { text: '\u7537' },\n      \u5973: { text: '\u5973' },\n    },\n  },\n  {\n    title: '\u8eab\u4efd\u8bc1\u53f7',\n    dataIndex: 'idNumber',\n    hideInSearch: true,\n  },\n  {\n    title: '\u64cd\u4f5c',\n    valueType: 'option',\n    enableDelete: true,\n    render: (text, record, index, actionRef, innerRef) => [\n      <LinkButton key={1} onClick={() => innerRef.current?.openModal('read', record)}>\n        \u67e5\u770b\n      </LinkButton>,\n    ],\n  },\n];",$="import { ProTable } from 'react-admin-kit';\nimport { useRef } from 'react';\nimport { Button, message } from 'antd';\nimport { mockRequest, requestExtra } from './apis';\n\nimport 'antd/dist/antd.min.css';\nimport { getColumns } from './columns';\n\nexport const FORM_TYPE_MAP = {\n  new: '\u65b0\u589e',\n  edit: '\u7f16\u8f91',\n  read: '\u67e5\u770b',\n};\n\nconst OnOpenDemo = () => {\n  const innerRef = useRef<any>();\n  const actionRef = useRef<any>();\n\n  const onFinish = (values: any, type) => {\n    console.log({ values });\n    // \u6a21\u62df\u8bf7\u6c42\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(true);\n\n        message.success(FORM_TYPE_MAP[type] + '\u6210\u529f');\n        actionRef.current?.reload();\n      }, 1000);\n    });\n  };\n\n  const onOpen = (formType, formRef, formData) => {\n    if (formType === 'edit') {\n      return requestExtra(formData.id).then((res) => {\n        formRef.current?.setFields([{ name: 'extra', value: res, touched: false }]);\n      });\n    }\n  };\n\n  return (\n    <div>\n      <ProTable\n        name=\"\u7528\u6237\"\n        columns={getColumns()}\n        innerRef={innerRef}\n        actionRef={actionRef}\n        request={mockRequest}\n        onFinish={onFinish}\n        bordered\n        toolbar={{\n          actions: [\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                innerRef.current?.openModal();\n              }}\n            >\n              \u65b0\u589e\n            </Button>,\n          ],\n        }}\n        search={false}\n        onOpen={onOpen}\n      />\n    </div>\n  );\n};\n\nexport default OnOpenDemo;",X="export const mockRequest = () => {\n  return new Promise((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          data: [\n            { id: 1, name: 'Jack', phone: 133 },\n            { id: 2, name: 'Tom', phone: 155 },\n          ],\n        }),\n      1000,\n    );\n  });\n};\n\nexport const requestExtra = (id) => {\n  console.log('request detail for id', id);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(8888), 500);\n  });\n};",ee="import { LinkButton } from 'react-admin-kit';\nimport type { ProColumnType } from 'react-admin-kit';\n\nexport const getColumns = (): ProColumnType[] => [\n  {\n    title: '\u989d\u5916\u4fe1\u606f',\n    dataIndex: 'extra',\n    hideInTable: true,\n  },\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n  },\n  {\n    title: '\u6635\u79f0',\n    dataIndex: 'nickName',\n    hideInSearch: true,\n  },\n  {\n    title: '\u6027\u522b',\n    dataIndex: 'sex',\n    formItemProps: {},\n    valueEnum: {\n      \u7537: { text: '\u7537' },\n      \u5973: { text: '\u5973' },\n    },\n  },\n  {\n    title: '\u8eab\u4efd\u8bc1\u53f7',\n    dataIndex: 'idNumber',\n    hideInSearch: true,\n  },\n\n  {\n    title: '\u64cd\u4f5c',\n    valueType: 'option',\n    enableDelete: true,\n    render: (text, record, index, actionRef, innerRef) => [\n      <LinkButton key={1} onClick={() => innerRef.current?.openModal('edit', record)}>\n        \u7f16\u8f91\n      </LinkButton>,\n    ],\n  },\n];",ne="import { ProTable } from 'react-admin-kit';\nimport { useRef } from 'react';\nimport { message } from 'antd';\nimport { mockRequest } from './apis';\n\nimport 'antd/dist/antd.min.css';\nimport { getColumns } from './columns';\n\nexport const FORM_TYPE_MAP = {\n  new: '\u65b0\u589e',\n  edit: '\u7f16\u8f91',\n  read: '\u67e5\u770b',\n};\n\nconst OnFinishDemo = () => {\n  const innerRef = useRef<any>();\n  const actionRef = useRef<any>();\n\n  const onFinish = (values: any, type, formData) => {\n    console.log({ values, type, formData });\n    // \u6a21\u62df\u8bf7\u6c42\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(true);\n\n        message.success(FORM_TYPE_MAP[type] + '\u6210\u529f');\n        actionRef.current?.reload();\n      }, 1000);\n    });\n  };\n\n  return (\n    <div>\n      <ProTable\n        name=\"\u7528\u6237\"\n        columns={getColumns()}\n        innerRef={innerRef}\n        actionRef={actionRef}\n        request={mockRequest}\n        onFinish={onFinish}\n        bordered\n        search={false}\n      />\n    </div>\n  );\n};\n\nexport default OnFinishDemo;",te="export const mockRequest = () => {\n  return new Promise((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          data: [\n            { id: 1, name: 'Jack', phone: 133 },\n            { id: 2, name: 'Tom', phone: 155 },\n          ],\n        }),\n      1000,\n    );\n  });\n};\n\nexport const requestExtra = (id) => {\n  console.log('request detail for id', id);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(8888), 500);\n  });\n};",re="import { LinkButton } from 'react-admin-kit';\nimport type { ProColumnType } from 'react-admin-kit';\n\nexport const getColumns = (): ProColumnType[] => [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n  },\n  {\n    title: '\u6635\u79f0',\n    dataIndex: 'nickName',\n    hideInSearch: true,\n  },\n  {\n    title: '\u6027\u522b',\n    dataIndex: 'sex',\n    formItemProps: {},\n    valueEnum: {\n      \u7537: { text: '\u7537' },\n      \u5973: { text: '\u5973' },\n    },\n  },\n  {\n    title: '\u8eab\u4efd\u8bc1\u53f7',\n    dataIndex: 'idNumber',\n    hideInSearch: true,\n  },\n\n  {\n    title: '\u64cd\u4f5c',\n    valueType: 'option',\n    enableDelete: true,\n    render: (text, record, index, actionRef, innerRef) => [\n      <LinkButton key={1} onClick={() => innerRef.current?.openModal('edit', record)}>\n        \u7f16\u8f91\n      </LinkButton>,\n    ],\n  },\n];",ie="import { ProTable } from 'react-admin-kit';\nimport { useRef, useState } from 'react';\nimport { Button, Card, message } from 'antd';\nimport produce from 'immer';\n\nimport 'antd/dist/antd.min.css';\nimport { getColumns } from './columns';\n\nexport const FORM_TYPE_MAP = {\n  new: '\u65b0\u589e',\n  edit: '\u7f16\u8f91',\n  read: '\u67e5\u770b',\n};\n\nconst Controlled = () => {\n  const innerRef = useRef<any>();\n  const actionRef = useRef<any>();\n\n  const [dataSource, setDataSource] = useState([\n    { id: 1, name: '\u738b\u5148\u751f', phone: '1596668888', sex: '\u7537' },\n  ]);\n\n  const onFinish = (values: any, type, formData) => {\n    console.log({ values });\n    if (type === 'new') {\n      setDataSource(dataSource.concat({ ...values, id: Date.now() }));\n    } else {\n      const newData = produce(dataSource, (draft) => {\n        const index = draft.findIndex((item) => item.id == formData.id);\n        draft[index] = { ...formData, ...values };\n      });\n      setDataSource(newData);\n    }\n  };\n\n  return (\n    <div>\n      <div style={{ textAlign: 'right', marginBottom: '10px' }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            innerRef.current.openModal();\n          }}\n        >\n          \u65b0\u589e\u7528\u6237\n        </Button>\n      </div>\n      <ProTable\n        name=\"\u7528\u6237\"\n        headerTitle={false}\n        columns={getColumns()}\n        innerRef={innerRef}\n        actionRef={actionRef}\n        onFinish={onFinish}\n        dataSource={dataSource}\n        bordered\n        search={false}\n        pagination={false}\n        noPadding\n      />\n    </div>\n  );\n};\n\nexport default Controlled;",oe="import { LinkButton } from 'react-admin-kit';\nimport type { ProColumnType } from 'react-admin-kit';\n\nexport const getColumns = (): ProColumnType[] => [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n  },\n  {\n    title: '\u51fa\u751f\u65e5\u671f',\n    dataIndex: 'birthday',\n    valueType: 'date',\n  },\n\n  {\n    title: '\u6027\u522b',\n    dataIndex: 'sex',\n    formItemProps: {},\n    valueEnum: {\n      \u7537: { text: '\u7537' },\n      \u5973: { text: '\u5973' },\n    },\n  },\n  {\n    title: '\u8eab\u4efd\u8bc1\u53f7',\n    dataIndex: 'idNumber',\n    hideInSearch: true,\n  },\n  {\n    title: '\u64cd\u4f5c',\n    valueType: 'option',\n    enableDelete: true,\n    render: (text, record, index, actionRef, innerRef) => [\n      <LinkButton key={1} onClick={() => innerRef.current?.openModal('edit', record)}>\n        \u7f16\u8f91\n      </LinkButton>,\n    ],\n  },\n];",ae="import { ProTable } from 'react-admin-kit';\nimport { mockRequestForExport } from '../basic/apis';\n\nimport { getColumns } from './columns';\n\nconst Export = () => {\n  return (\n    <div>\n      <ProTable\n        noPadding\n        name=\"\u7528\u6237\"\n        search={false}\n        columns={getColumns()}\n        request={mockRequestForExport}\n        bordered\n        rowSelection={{}}\n        tableAlertOption={{ hideExport: false }}\n      />\n    </div>\n  );\n};\n\nexport default Export;",se="import { Tag } from 'antd';\nimport type { ProColumnType } from 'react-admin-kit';\n\nexport const getColumns = (): ProColumnType[] => [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n    width: 80,\n  },\n  {\n    title: '\u751f\u65e5',\n    dataIndex: 'birthday',\n    valueType: 'date',\n    width: 110,\n  },\n  {\n    title: '\u6027\u522b',\n    dataIndex: 'sex',\n    valueType: 'select',\n    valueEnum: {\n      man: { text: '\u7537' },\n      woman: { text: '\u5973' },\n    },\n    width: 80,\n  },\n  {\n    title: '\u7c7b\u578b',\n    dataIndex: 'type',\n    valueType: 'select',\n    fieldProps: {\n      options: [\n        { label: '\u4f1a\u5458', value: '1' },\n        { label: '\u975e\u4f1a\u5458', value: '2' },\n      ],\n    },\n    width: 80,\n  },\n  {\n    title: '\u4f1a\u5458\u8303\u56f4',\n    dataIndex: 'range',\n    valueType: 'dateRange',\n    width: 130,\n  },\n  {\n    title: '\u72b6\u6001',\n    dataIndex: 'status',\n    render: (text) => {\n      if (text) {\n        return <Tag color=\"success\">\u5f00\u542f</Tag>;\n      }\n\n      return <Tag>\u672a\u5f00\u542f</Tag>;\n    },\n    renderExport: (text, record) => {\n      return text ? '\u5f00\u542f' : '\u672a\u5f00\u542f';\n    },\n    width: 80,\n  },\n  {\n    title: '\u521b\u5efa\u65e5\u671f',\n    dataIndex: 'createTime',\n    valueType: 'dateTime',\n    width: 100,\n  },\n];",le="import { ProTable } from 'react-admin-kit';\nimport { useRef } from 'react';\nimport { message } from 'antd';\nimport { mockRequest } from './apis';\n\nimport 'antd/dist/antd.min.css';\nimport { getColumns } from './columns';\n\nexport const FORM_TYPE_MAP = {\n  new: '\u65b0\u589e',\n  edit: '\u7f16\u8f91',\n  read: '\u67e5\u770b',\n};\n\nconst ConventionDemo = () => {\n  const innerRef = useRef<any>();\n  const actionRef = useRef<any>();\n\n  const onFinish = (values: any, type, formData) => {\n    console.log({ values, type, formData });\n    // \u6a21\u62df\u8bf7\u6c42\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(true);\n\n        message.success(FORM_TYPE_MAP[type] + '\u6210\u529f');\n        actionRef.current?.reload();\n      }, 1000);\n    });\n  };\n\n  return (\n    <div>\n      <ProTable\n        name=\"\u7528\u6237\"\n        columns={getColumns()}\n        innerRef={innerRef}\n        actionRef={actionRef}\n        request={mockRequest}\n        onFinish={onFinish}\n        bordered\n        search={false}\n        pagination={false}\n        formProps={{\n          layout: 'horizontal',\n          labelCol: { span: 4 },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ConventionDemo;",de="export const mockRequest = () => {\n  return new Promise((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          data: [\n            {\n              id: '1',\n              name: 'tom',\n              deptId: '3',\n              deptName: '\u9500\u552e\u90e8',\n              isMember: 1,\n              gradeId: '2',\n              gradeName: 'B',\n            },\n          ],\n        }),\n      1000,\n    );\n  });\n};\n\nexport const requestExtra = (id) => {\n  console.log('request detail for id', id);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(8888), 500);\n  });\n};",ue="import { LinkButton } from 'react-admin-kit';\nimport type { ProColumnType } from 'react-admin-kit';\n\nexport const getColumns = (): ProColumnType[] => [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n  },\n  {\n    title: '\u90e8\u95e8',\n    dataIndex: 'deptId,deptName',\n    valueType: 'treeSelect',\n    width: 'sm',\n    fieldProps: {\n      placeholder: '\u8bf7\u9009\u62e9',\n      labelInValue: true,\n      options: [\n        {\n          value: '1',\n          label: 'A\u516c\u53f8',\n          children: [\n            { value: '2', label: '\u6280\u672f\u90e8' },\n            { value: '3', label: '\u9500\u552e\u90e8' },\n          ],\n        },\n      ],\n    },\n    renderText: (text, record) => record.deptName,\n  },\n  {\n    title: '\u4f1a\u5458',\n    dataIndex: 'isMember',\n    valueType: 'radio',\n    fieldProps: {\n      options: [\n        { label: '\u5426', value: 0 },\n        { label: '\u662f', value: 1 },\n      ],\n    },\n  },\n\n  // \u4ec5\u5728table\u4e2d\u663e\u793a\n  {\n    title: '\u4f1a\u5458\u7b49\u7ea7',\n    dataIndex: 'gradeName',\n    hideInForm: true,\n  },\n\n  // \u4ec5\u5728form\u4e2d\u663e\u793a\n  {\n    hideInTable: true,\n    valueType: 'dependency',\n    name: ['isMember'],\n    columns: ({ isMember }) => {\n      if (isMember) {\n        return [\n          {\n            title: '\u4f1a\u5458\u7b49\u7ea7',\n            dataIndex: 'gradeId,gradeName',\n            valueType: 'select',\n            fieldProps: {\n              labelInValue: true,\n              options: [\n                { value: '1', label: 'A' },\n                { value: '2', label: 'B' },\n              ],\n            },\n          },\n        ];\n      }\n\n      return [];\n    },\n  },\n  {\n    valueType: 'option',\n    title: '\u64cd\u4f5c',\n    render: (text, record, index, actionRef, innerRef) => [\n      <LinkButton key={1} onClick={() => innerRef.current?.openModal('edit', record)}>\n        \u7f16\u8f91\n      </LinkButton>,\n    ],\n  },\n];",ce="import { ProTable } from 'react-admin-kit';\nimport { useRef } from 'react';\nimport { message } from 'antd';\nimport { mockRequest } from './apis';\n\nimport 'antd/dist/antd.min.css';\nimport { getColumns } from './columns';\n\nexport const FORM_TYPE_MAP = {\n  new: '\u65b0\u589e',\n  edit: '\u7f16\u8f91',\n  read: '\u67e5\u770b',\n};\n\nconst InnerRefDataDemo = () => {\n  const innerRef = useRef<any>();\n  const actionRef = useRef<any>();\n\n  const onFinish = (values: any, type, formData) => {\n    const { otherId } = innerRef.current.data;\n    console.log({ values, type, formData, otherId });\n    // \u6a21\u62df\u8bf7\u6c42\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(true);\n\n        message.success(FORM_TYPE_MAP[type] + '\u6210\u529f');\n        actionRef.current?.reload();\n      }, 1000);\n    });\n  };\n\n  return (\n    <div>\n      <ProTable\n        name=\"\u7528\u6237\"\n        columns={getColumns()}\n        innerRef={innerRef}\n        actionRef={actionRef}\n        request={mockRequest}\n        onFinish={onFinish}\n        bordered\n        search={false}\n        pagination={false}\n      />\n    </div>\n  );\n};\n\nexport default InnerRefDataDemo;",me="export const mockRequest = () => {\n  return new Promise((resolve) => {\n    setTimeout(\n      () =>\n        resolve({\n          data: [{ id: 1, name: 'Jack' }],\n        }),\n      1000,\n    );\n  });\n};",pe="import { LinkButton } from 'react-admin-kit';\nimport type { ProColumnType } from 'react-admin-kit';\n\nexport const getColumns = (): ProColumnType[] => [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'name',\n  },\n  {\n    title: '\u90e8\u95e8',\n    dataIndex: 'deptId,deptName',\n    valueType: 'select',\n    fieldProps: (form, innerRef) => ({\n      labelInValue: true,\n      options: [\n        {\n          label: '\u9500\u552e\u90e8',\n          value: '1',\n          otherId: 'A',\n        },\n        {\n          label: '\u6280\u672f\u90e8',\n          value: '2',\n          otherId: 'B',\n        },\n      ],\n      onChange: (val, option) => {\n        innerRef.current?.setData({ otherId: option.otherId });\n      },\n    }),\n  },\n  {\n    title: '\u64cd\u4f5c',\n    valueType: 'option',\n    enableDelete: true,\n    render: (text, record, index, actionRef, innerRef) => [\n      <LinkButton key={1} onClick={() => innerRef.current?.openModal('edit', record)}>\n        \u7f16\u8f91\n      </LinkButton>,\n    ],\n  },\n];",fe="import { SchemaForm } from 'react-admin-kit';\r\nimport { Button } from 'antd';\r\nimport { columns } from './columns';\r\nimport { useRef } from 'react';\r\n\r\nimport type { FormInstance } from 'antd';\r\n\r\nconst Basic = () => {\r\n  const formRef = useRef<FormInstance>();\r\n\r\n  const onFinish = (values: any) => {\r\n    console.log({ values });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SchemaForm\r\n        onFinish={onFinish}\r\n        formRef={formRef}\r\n        columns={columns}\r\n        autoFocusFirstInput={false}\r\n      />\r\n\r\n      <div style={{ textAlign: 'end' }}>\r\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\r\n          \u91cd\u7f6e\r\n        </Button>\r\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\r\n          \u63d0\u4ea4\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Basic;",he="export const columns = [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'username',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n        },\n      ],\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n        },\n      ],\n    },\n  },\n  {\n    title: '\u6635\u79f0',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n        },\n      ],\n    },\n    dataIndex: 'nickName',\n  },\n  {\n    title: '\u6027\u522b',\n    dataIndex: 'sex',\n    formItemProps: {},\n    valueEnum: {\n      \u7537: { text: '\u7537' },\n      \u5973: { text: '\u5973' },\n    },\n  },\n  {\n    title: '\u8eab\u4efd\u8bc1\u53f7',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n        },\n      ],\n    },\n    dataIndex: 'idNumber',\n  },\n];",ge="import { SchemaForm } from 'react-admin-kit';\r\nimport { Button } from 'antd';\r\nimport { columns } from './columns';\r\nimport { useRef } from 'react';\r\n\r\nimport type { FormInstance } from 'antd';\r\n\r\nconst Horizontal = () => {\r\n  const formRef = useRef<FormInstance>();\r\n\r\n  const onFinish = (values: any) => {\r\n    console.log({ values });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SchemaForm\r\n        layout=\"horizontal\"\r\n        labelCol={{ span: 3 }}\r\n        onFinish={onFinish}\r\n        formRef={formRef}\r\n        columns={columns}\r\n        autoFocusFirstInput={false}\r\n      />\r\n\r\n      <div style={{ textAlign: 'end' }}>\r\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\r\n          \u91cd\u7f6e\r\n        </Button>\r\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\r\n          \u63d0\u4ea4\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Horizontal;",ye="export const columns = [\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'username',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u6635\u79f0',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u6635\u79f0\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n    dataIndex: 'nickName',\r\n  },\r\n  {\r\n    title: '\u6027\u522b',\r\n    dataIndex: 'sex',\r\n    formItemProps: {},\r\n    valueEnum: {\r\n      \u7537: { text: '\u7537' },\r\n      \u5973: { text: '\u5973' },\r\n    },\r\n  },\r\n  {\r\n    title: '\u8eab\u4efd\u8bc1\u53f7',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u8eab\u4efd\u8bc1\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n    dataIndex: 'idNumber',\r\n  },\r\n];",ve="import { SchemaForm } from 'react-admin-kit';\r\nimport { Button } from 'antd';\r\nimport { columns } from './columns';\r\nimport { useRef } from 'react';\r\n\r\nimport type { FormInstance } from 'antd';\r\n\r\nconst Grid = () => {\r\n  const formRef = useRef<FormInstance>();\r\n\r\n  const onFinish = (values: any) => {\r\n    console.log({ values });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SchemaForm\r\n        grid={true}\r\n        rowProps={{ gutter: [8, 0] }}\r\n        colProps={{ span: 8 }}\r\n        onFinish={onFinish}\r\n        formRef={formRef}\r\n        columns={columns}\r\n        autoFocusFirstInput={false}\r\n      />\r\n\r\n      <div style={{ textAlign: 'end' }}>\r\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\r\n          \u91cd\u7f6e\r\n        </Button>\r\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\r\n          \u63d0\u4ea4\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;",be="export const columns = [\r\n  {\r\n    title: '\u7528\u6237\u540d',\r\n    dataIndex: 'username',\r\n    colProps: { span: 24 },\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    title: '\u6635\u79f0',\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u6635\u79f0\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n    dataIndex: 'nickName',\r\n  },\r\n  {\r\n    title: '\u6027\u522b',\r\n    dataIndex: 'sex',\r\n    formItemProps: {},\r\n    valueEnum: {\r\n      \u7537: { text: '\u7537' },\r\n      \u5973: { text: '\u5973' },\r\n    },\r\n  },\r\n  {\r\n    title: '\u8eab\u4efd\u8bc1\u53f7',\r\n    colProps: { span: 16 },\r\n    formItemProps: {\r\n      rules: [\r\n        {\r\n          required: true,\r\n          message: '\u8eab\u4efd\u8bc1\u4e3a\u5fc5\u586b\u9879',\r\n        },\r\n      ],\r\n    },\r\n    dataIndex: 'idNumber',\r\n  },\r\n];",xe="import { SchemaForm } from 'react-admin-kit';\r\nimport { Button } from 'antd';\r\nimport { getColumns } from './columns';\r\nimport { useRef } from 'react';\r\n\r\nimport type { FormInstance } from 'antd';\r\n\r\nconst GridHorizontal = () => {\r\n  const formRef = useRef<FormInstance>();\r\n\r\n  const onFinish = (values: any) => {\r\n    console.log({ values });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SchemaForm\r\n        layout=\"horizontal\"\r\n        grid={true}\r\n        rowProps={{ gutter: [0, 0] }}\r\n        colProps={{ span: 8 }}\r\n        labelCol={{ span: 9 }}\r\n        onFinish={onFinish}\r\n        formRef={formRef}\r\n        columns={getColumns()}\r\n        autoFocusFirstInput={false}\r\n      />\r\n\r\n      <div style={{ textAlign: 'end' }}>\r\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\r\n          \u91cd\u7f6e\r\n        </Button>\r\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\r\n          \u63d0\u4ea4\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridHorizontal;",Fe="export const getColumns = () => [\n  {\n    title: '\u7528\u6237\u540d',\n    dataIndex: 'username',\n    colProps: { span: 24 },\n    formItemProps: {\n      labelCol: { span: 3 },\n      rules: [\n        {\n          required: true,\n          message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n    formItemProps: {\n      // labelCol\u53ef\u4ee5\u5728SchemaForm\u4e0a\u6574\u4f53\u8bbe\u5b9a\n      labelCol: { span: 9 },\n      rules: [\n        {\n          required: true,\n          message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n  },\n  {\n    title: '\u6635\u79f0',\n    formItemProps: {\n      // labelCol\u5df2\u5728SchemaForm\u4e0a\u6574\u4f53\u8bbe\u5b9a\n      rules: [\n        {\n          required: true,\n          message: '\u6635\u79f0\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n    dataIndex: 'nickName',\n  },\n  {\n    title: '\u6027\u522b',\n    dataIndex: 'sex',\n    formItemProps: {\n      // labelCol\u5df2\u5728SchemaForm\u4e0a\u6574\u4f53\u8bbe\u5b9a\n    },\n    valueEnum: {\n      \u7537: { text: '\u7537' },\n      \u5973: { text: '\u5973' },\n    },\n  },\n  {\n    title: '\u8eab\u4efd\u8bc1\u53f7',\n    colProps: { span: 16 },\n    formItemProps: {\n      // 3 / 16 = 0.1875\n      labelCol: { flex: '0 0 18.75%' },\n      rules: [\n        {\n          required: true,\n          message: '\u8eab\u4efd\u8bc1\u4e3a\u5fc5\u586b\u9879',\n        },\n      ],\n    },\n    dataIndex: 'idNumber',\n  },\n];",Re="import { SchemaForm } from 'react-admin-kit';\r\nimport { Button } from 'antd';\r\nimport { columns } from './columns';\r\nimport { useRef } from 'react';\r\n\r\nimport type { FormInstance } from 'antd';\r\n\r\nconst Placeholder = () => {\r\n  const formRef = useRef<FormInstance>();\r\n\r\n  const onFinish = (values: any) => {\r\n    console.log({ values });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SchemaForm\r\n        layout=\"horizontal\"\r\n        grid={true}\r\n        rowProps={{ gutter: [0, 0] }}\r\n        colProps={{ span: 8 }}\r\n        labelCol={{ span: 9 }}\r\n        onFinish={onFinish}\r\n        formRef={formRef}\r\n        columns={columns}\r\n        autoFocusFirstInput={false}\r\n      />\r\n\r\n      <div style={{ textAlign: 'end' }}>\r\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\r\n          \u91cd\u7f6e\r\n        </Button>\r\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\r\n          \u63d0\u4ea4\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Placeholder;",Pe="export const columns = [\r\n  {\r\n    title: '\u8054\u7cfb\u4eba',\r\n    dataIndex: 'name',\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'phone',\r\n  },\r\n  {\r\n    fieldProps: { hidden: true },\r\n  },\r\n  {\r\n    title: '\u8d1f\u8d23\u4eba',\r\n    dataIndex: 'chargeName',\r\n  },\r\n  {\r\n    title: '\u7535\u8bdd',\r\n    dataIndex: 'chargePhone',\r\n  },\r\n  {\r\n    title: '\u90ae\u7bb1',\r\n    dataIndex: 'mail',\r\n  },\r\n];",Te="import { SchemaForm } from 'react-admin-kit';\nimport { columns } from './columns';\nimport { useRef } from 'react';\n\nimport type { FormInstance } from 'antd';\n\nconst Readonly = () => {\n  const formRef = useRef<FormInstance>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        layout=\"horizontal\"\n        grid={true}\n        rowProps={{ gutter: [0, 0] }}\n        colProps={{ span: 8 }}\n        labelCol={{ span: 9 }}\n        onFinish={onFinish}\n        formRef={formRef}\n        columns={columns}\n        readonly={true}\n        initialValues={{ name: '\u738b\u5148\u751f', phone: 1202228888, sex: '\u7537', mail: 'mail.com' }}\n      />\n    </div>\n  );\n};\n\nexport default Readonly;",we="export const columns = [\n  {\n    title: '\u8054\u7cfb\u4eba',\n    dataIndex: 'name',\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'phone',\n  },\n  {\n    fieldProps: { hidden: true },\n    render: () => null,\n  },\n  {\n    title: '\u8d1f\u8d23\u4eba',\n    dataIndex: 'chargeName',\n  },\n  {\n    title: '\u7535\u8bdd',\n    dataIndex: 'chargePhone',\n  },\n  {\n    title: '\u81ea\u5b9a\u4e49',\n    dataIndex: 'mail',\n    render: (dom, record) => {\n      if (record.mode === 'read') {\n        return '\ud83d\udce7' + record.value;\n      }\n      return dom;\n    },\n  },\n];",Ie="import { SchemaForm } from 'react-admin-kit';\n\nconst DependencyDemo = () => {\n  const columns = [\n    {\n      title: '\u662f\u5426\u663e\u793a\u7535\u8bdd',\n      dataIndex: 'showPhone',\n      valueType: 'select',\n      fieldProps: {\n        options: [\n          { label: '\u662f', value: 1 },\n          { label: '\u5426', value: 0 },\n        ],\n      },\n    },\n    {\n      valueType: 'dependency',\n      name: ['showPhone'],\n      columns: ({ showPhone }) => {\n        if (showPhone) {\n          return [\n            {\n              title: '\u7535\u8bdd',\n              dataIndex: 'phone',\n            },\n          ];\n        } else {\n          return [];\n        }\n      },\n    },\n  ];\n\n  return (\n    <div>\n      <SchemaForm columns={columns} autoFocusFirstInput={false} />\n    </div>\n  );\n};\n\nexport default DependencyDemo;",ke="import { SchemaForm } from 'react-admin-kit';\nimport { Button } from 'antd';\nimport { getColumns } from './columns';\nimport { useRef, useState } from 'react';\n\nimport type { FormInstance } from 'antd';\n\nconst InitValueDemo = () => {\n  const formRef = useRef<FormInstance>();\n\n  const [readonly, setReadonly] = useState(false);\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        onFinish={onFinish}\n        formRef={formRef}\n        columns={getColumns()}\n        autoFocusFirstInput={false}\n        initialValues={{ showPhone: 0 }}\n        readonly={readonly}\n      />\n\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => setReadonly(!readonly)}>\n          \u5207\u6362\u53ea\u8bfb\n        </Button>\n        <Button\n          style={{ marginRight: '10px' }}\n          onClick={() => formRef.current?.setFieldsValue({ showPhone: 1, phone: 15800012345 })}\n        >\n          \u8d4b\u503c\n        </Button>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default InitValueDemo;",Ee="import { Select } from 'antd';\n\nexport const getColumns = () => [\n  {\n    title: '\u662f\u5426\u663e\u793a\u7535\u8bdd',\n    dataIndex: 'showPhone',\n    renderFormItem: () => (\n      <Select\n        options={[\n          { label: '\u662f', value: 1 },\n          { label: '\u5426', value: 0 },\n        ]}\n      />\n    ),\n    render: (text) => (text ? '\u662f' : '\u5426'),\n  },\n  {\n    valueType: 'dependency',\n    name: ['showPhone'],\n    columns: ({ showPhone }) => {\n      if (showPhone) {\n        return [\n          {\n            title: '\u7535\u8bdd',\n            dataIndex: 'phone',\n          },\n        ];\n      } else {\n        return [];\n      }\n    },\n  },\n];",Ce="import { ProForm, SchemaForm } from 'react-admin-kit';\nimport { Button, Card } from 'antd';\nimport { getBaseColumns } from './baseColumns';\nimport getBusinessColumns from './businessColumns';\nimport { useRef, useState } from 'react';\n\nimport type { FormInstance } from 'antd';\n\nimport 'antd/dist/antd.min.css';\n\nconst Embed = () => {\n  const formRef = useRef<FormInstance>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n    return true;\n  };\n\n  const [readonly, setReadonly] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n  const handleFillData = () => {\n    setLoading(true);\n    setTimeout(() => {\n      formRef.current?.setFieldsValue({\n        base: {\n          username: '\u738b\u5148\u751f',\n          phone: '15588888',\n          nickName: 'wang',\n          sex: '\u7537',\n          idNumber: 3202335566,\n        },\n        business: { company: '\u4fe1\u606f\u6280\u672f\u6709\u9650\u516c\u53f8', address: '\u6c5f\u82cf\u7701\u65e0\u9521\u5e02', serviceName: '1' },\n      });\n      setLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <div>\n      <ProForm\n        layout=\"horizontal\"\n        onFinish={onFinish}\n        submitter={false}\n        formRef={formRef}\n        readonly={readonly} // \u4e5f\u53ef\u4ee5\u5355\u72ec\u8bbe\u5728\u67d0\u4e2aSchemaForm\u4e0a\n      >\n        <Card\n          style={{ marginBottom: '24px' }}\n          size=\"small\"\n          headStyle={{ background: '#ebebeb' }}\n          title=\"\u57fa\u672c\u4fe1\u606f\"\n        >\n          <SchemaForm\n            embed\n            grid={true}\n            rowProps={{ gutter: [0, 0] }}\n            colProps={{ span: 8 }}\n            labelCol={{ span: 9 }}\n            columns={getBaseColumns()}\n            valueBaseName=\"base\"\n          />\n        </Card>\n\n        <Card size=\"small\" title=\"\u4e1a\u52a1\u4fe1\u606f\" headStyle={{ background: '#ebebeb' }}>\n          <SchemaForm\n            embed\n            columns={getBusinessColumns()}\n            labelCol={{ span: 3 }}\n            valueBaseName=\"business\"\n          />\n        </Card>\n      </ProForm>\n\n      <div style={{ marginTop: '10px', textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => setReadonly((val) => !val)}>\n          \u5207\u6362\u53ea\u8bfb\n        </Button>\n        <Button loading={loading} style={{ marginRight: '20px' }} onClick={handleFillData}>\n          \u56de\u663e\u6570\u636e\n        </Button>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Embed;",Me="export const getBaseColumns = () => {\n  return [\n    {\n      title: '\u7528\u6237\u540d',\n      dataIndex: 'username',\n      colProps: { span: 24 },\n      formItemProps: {\n        labelCol: { span: 3 },\n        rules: [\n          {\n            required: true,\n            message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n          },\n        ],\n      },\n    },\n    {\n      valueType: 'dependency',\n      // \ud83d\udc47\u8fd9\u91cc\u662f\u4e00\u4e2a\u5957\u5d4c\u6570\u7ec4, \u56e0\u4e3avalueBaseName\u662fbusiness\ud83d\udc47\n      name: [['business', 'serviceName']],\n      columns: (values) => {\n        const serviceName = values?.business?.serviceName;\n        if (serviceName == 1) {\n          return [];\n        } else {\n          return [\n            {\n              title: '\u8eab\u4efd\u8bc1\u53f7',\n              dataIndex: 'idNumber',\n              colProps: { span: 16 },\n              formItemProps: {\n                // 3 / 16 = 0.1875\n                labelCol: { flex: '0 0 18.75%' },\n              },\n            },\n            { fieldProps: { hidden: true } },\n          ];\n        }\n      },\n    },\n    {\n      title: '\u7535\u8bdd',\n      dataIndex: 'phone',\n    },\n    {\n      title: '\u51fa\u751f\u65e5\u671f',\n      dataIndex: 'birthday',\n      valueType: 'dateMonth',\n    },\n    {\n      title: '\u6027\u522b',\n      dataIndex: 'sex',\n      fieldProps: {\n        options: ['\u7537', '\u5973'],\n      },\n    },\n  ];\n};",He="import { Select } from 'antd';\n\nconst getBusinessColumns = () => [\n  {\n    title: '\u516c\u53f8\u540d',\n    dataIndex: 'company',\n    colProps: { span: 24 },\n    formItemProps: {\n      labelCol: { span: 3 },\n      rules: [\n        {\n          required: true,\n        },\n      ],\n    },\n    renderFormItem: () => (\n      <Select\n        options={[\n          {\n            label: 'A\u516c\u53f8',\n            value: '1',\n            address: '\u6c5f\u82cf\u7701',\n            otherKey: '1a',\n          },\n        ]}\n      />\n    ),\n    fieldProps: (form) => ({\n      onChange: (val, option) => {\n        if (val) {\n          form.setFieldsValue({ business: { address: option.address } });\n        } else {\n          form.setFieldsValue({ business: { address: undefined } });\n        }\n      },\n    }),\n  },\n  {\n    title: '\u5730\u5740',\n    dataIndex: 'address',\n    renderFormItem: (_, { defaultRender }) => {\n      return defaultRender();\n    },\n  },\n  {\n    title: '\u529e\u7406\u4e1a\u52a1',\n    dataIndex: 'serviceName',\n    renderFormItem: () => (\n      <Select\n        options={[\n          {\n            label: '\u4e0d\u9700\u8981\u8eab\u4efd\u8bc1\u4e1a\u52a1',\n            value: '1',\n          },\n          {\n            label: '\u9700\u8981\u8eab\u4efd\u8bc1\u4e1a\u52a1',\n            value: '2',\n          },\n        ]}\n      />\n    ),\n    render: (text) => {\n      if (text === '1') {\n        return '\u4e0d\u9700\u8981\u8eab\u4efd\u8bc1\u4e1a\u52a1';\n      }\n\n      if (text === '2') {\n        return '\u9700\u8981\u8eab\u4efd\u8bc1\u4e1a\u52a1';\n      }\n\n      return '-';\n    },\n  },\n];\n\nexport default getBusinessColumns;",Se="import { SchemaForm } from 'react-admin-kit';\nimport { Button } from 'antd';\nimport { columns } from './columns';\nimport { useRef } from 'react';\n\nimport type { FormInstance } from 'antd';\n\nconst Group = () => {\n  const formRef = useRef<FormInstance>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        onFinish={onFinish}\n        formRef={formRef}\n        columns={columns}\n        autoFocusFirstInput={false}\n      />\n\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Group;",Be="export const columns = [\n  {\n    title: '\u57fa\u672c\u4fe1\u606f',\n    valueType: 'group',\n    fieldProps: {\n      // \ud83d\udc47\u53ef\u4ee5\u4f20\u5165Space\u7684\u5c5e\u6027, \u8fd9\u91cc\u95f4\u8ddd\u662fsmall\ud83d\udc47\n      size: 'small',\n    },\n    columns: [\n      {\n        title: '\u7528\u6237\u540d',\n        dataIndex: 'username',\n        colProps: { span: 24 },\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n      },\n      {\n        title: '\u7535\u8bdd',\n        dataIndex: 'phone',\n      },\n    ],\n  },\n  {\n    valueType: 'divider',\n  },\n  {\n    title: '\u989d\u5916\u4fe1\u606f',\n    valueType: 'group',\n    columns: [\n      {\n        title: '\u6635\u79f0',\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u6635\u79f0\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n        dataIndex: 'nickName',\n      },\n      {\n        title: '\u6027\u522b',\n        dataIndex: 'sex',\n        formItemProps: {},\n        valueEnum: {\n          \u7537: { text: '\u7537' },\n          \u5973: { text: '\u5973' },\n        },\n      },\n      {\n        title: '\u8eab\u4efd\u8bc1\u53f7',\n        dataIndex: 'idNumber',\n      },\n    ],\n  },\n];",Le="import { SchemaForm } from 'react-admin-kit';\nimport { Button } from 'antd';\nimport { columns } from './columns';\nimport { useRef } from 'react';\n\nimport type { FormInstance } from 'antd';\n\nconst GroupGrid = () => {\n  const formRef = useRef<FormInstance>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u5916\u5c42\u7684\ud83d\udc47\n        grid\n        colProps={{ span: 24 }}\n        // \ud83d\udc46\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u5916\u5c42\u7684\ud83d\udc46\n\n        onFinish={onFinish}\n        formRef={formRef}\n        columns={columns}\n        autoFocusFirstInput={false}\n      />\n\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default GroupGrid;",qe="export const columns = [\n  {\n    title: '\u57fa\u672c\u4fe1\u606f',\n    valueType: 'group',\n    columns: [\n      {\n        title: '\u7528\u6237\u540d',\n        dataIndex: 'username',\n\n        // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u91cc\u5c42\u7684\ud83d\udc47\n        colProps: { span: 24 },\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n      },\n      {\n        title: '\u7535\u8bdd',\n        dataIndex: 'phone',\n\n        // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u91cc\u5c42\u7684\ud83d\udc47\n        colProps: { span: 24 },\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n      },\n    ],\n  },\n  {\n    valueType: 'divider',\n  },\n  {\n    title: '\u989d\u5916\u4fe1\u606f',\n    valueType: 'group',\n    columns: [\n      {\n        title: '\u6635\u79f0',\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u6635\u79f0\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n        dataIndex: 'nickName',\n      },\n      {\n        title: '\u6027\u522b',\n        dataIndex: 'sex',\n\n        // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u91cc\u5c42\u7684\ud83d\udc47\n        colProps: { span: 12 },\n        valueEnum: {\n          \u7537: { text: '\u7537' },\n          \u5973: { text: '\u5973' },\n        },\n      },\n      {\n        title: '\u8eab\u4efd\u8bc1\u53f7',\n        dataIndex: 'idNumber',\n\n        // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u91cc\u5c42\u7684\ud83d\udc47\n        colProps: { span: 12 },\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u8eab\u4efd\u8bc1\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n      },\n    ],\n  },\n];",De="import { SchemaForm } from 'react-admin-kit';\nimport { Button } from 'antd';\nimport { columns } from './columns';\nimport { useRef } from 'react';\n\nimport type { FormInstance } from 'antd';\n\nconst GroupGridHorizontal = () => {\n  const formRef = useRef<FormInstance>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u5916\u5c42\u7684\ud83d\udc47\n        grid\n        rowProps={{ align: 'top' }}\n        // \ud83d\udc46\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u5916\u5c42\u7684\ud83d\udc46\n        onFinish={onFinish}\n        formRef={formRef}\n        columns={columns}\n        autoFocusFirstInput={false}\n      />\n\n      <div style={{ textAlign: 'end' }}>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default GroupGridHorizontal;",Ae="import { Divider } from 'antd';\n\nexport const columns = [\n  {\n    title: '\u57fa\u672c\u4fe1\u606f',\n    valueType: 'group',\n\n    // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u5916\u5c42\u7684\ud83d\udc47\n    colProps: { span: 11 },\n    columns: [\n      {\n        title: '\u7528\u6237\u540d',\n        dataIndex: 'username',\n        colProps: { span: 24 },\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u7528\u6237\u540d\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n      },\n      {\n        title: '\u7535\u8bdd',\n        dataIndex: 'phone',\n        colProps: { span: 24 },\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u7535\u8bdd\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n      },\n    ],\n  },\n  {\n    renderFormItem: () => (\n      <div style={{ textAlign: 'center' }}>\n        <Divider type=\"vertical\" style={{ height: '50px' }} />\n      </div>\n    ),\n    fieldProps: { style: { width: '100%' } },\n\n    // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u5916\u5c42\u7684\ud83d\udc47\n    colProps: { span: 2, style: { alignSelf: 'center' } },\n  },\n  {\n    title: '\u989d\u5916\u4fe1\u606f',\n    valueType: 'group',\n\n    // \ud83d\udc47\u8fd9\u662f\u8bbe\u7f6e\u7ed9\u5916\u5c42\u7684\ud83d\udc47\n    colProps: { span: 11 },\n    columns: [\n      {\n        title: '\u6635\u79f0',\n        colProps: { span: 24 },\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u6635\u79f0\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n        dataIndex: 'nickName',\n      },\n      {\n        title: '\u6027\u522b',\n        dataIndex: 'sex',\n        colProps: { span: 24 },\n        valueEnum: {\n          \u7537: { text: '\u7537' },\n          \u5973: { text: '\u5973' },\n        },\n      },\n      {\n        title: '\u8eab\u4efd\u8bc1\u53f7',\n        dataIndex: 'idNumber',\n        colProps: { span: 24 },\n        formItemProps: {\n          rules: [\n            {\n              required: true,\n              message: '\u8eab\u4efd\u8bc1\u4e3a\u5fc5\u586b\u9879',\n            },\n          ],\n        },\n      },\n    ],\n  },\n];",Ze="import { SchemaForm, Button } from 'react-admin-kit';\nimport { columns } from './columns';\nimport { useRef } from 'react';\n\nimport type { ProFormInstance } from 'react-admin-kit';\n\nconst Convention = () => {\n  const formRef = useRef<ProFormInstance>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <div>\n      <SchemaForm\n        onFinish={onFinish}\n        formRef={formRef}\n        columns={columns}\n        autoFocusFirstInput={false}\n        initialValues={{\n          name: 'tom',\n          deptId: '3',\n          deptName: '\u9500\u552e\u90e8',\n          isMember: 1,\n          gradeId: '2',\n          gradeName: 'B',\n        }}\n      />\n\n      <div style={{ textAlign: 'end' }}>\n        <Button\n          style={{ marginRight: '10px' }}\n          onClick={() =>\n            formRef.current?.setFieldsValue({\n              name: 'jack',\n              deptId: '2',\n              deptName: '\u6280\u672f\u90e8',\n              isMember: 1,\n              gradeId: '1',\n              gradeName: 'A',\n            })\n          }\n        >\n          \u8d4b\u503c\n        </Button>\n        <Button\n          style={{ marginRight: '10px' }}\n          onClick={() => formRef.current?.resetFields(['deptId,deptName'])}\n        >\n          \u91cd\u7f6e\u90e8\u95e8\n        </Button>\n        <Button\n          style={{ marginRight: '10px' }}\n          onClick={() => formRef.current?.resetFields(['deptId,deptName', 'gradeId,gradeName'])}\n        >\n          \u91cd\u7f6e\u90e8\u95e8\u7b49\u7ea7\n        </Button>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\u6240\u6709\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Convention;",Ne="export const columns = [\n  {\n    title: '\u57fa\u672c\u4fe1\u606f',\n    valueType: 'group',\n    columns: [\n      {\n        title: '\u7528\u6237\u540d',\n        dataIndex: 'name',\n      },\n      {\n        title: '\u90e8\u95e8',\n        dataIndex: 'deptId,deptName',\n        valueType: 'treeSelect',\n        width: 'sm',\n        fieldProps: {\n          placeholder: '\u8bf7\u9009\u62e9',\n          labelInValue: true,\n          options: [\n            {\n              value: '1',\n              label: 'A\u516c\u53f8',\n              children: [\n                { value: '2', label: '\u6280\u672f\u90e8' },\n                { value: '3', label: '\u9500\u552e\u90e8' },\n              ],\n            },\n          ],\n        },\n      },\n      {\n        title: '\u4f1a\u5458',\n        dataIndex: 'isMember',\n        valueType: 'radio',\n        fieldProps: {\n          options: [\n            { label: '\u5426', value: 0 },\n            { label: '\u662f', value: 1 },\n          ],\n        },\n      },\n      {\n        valueType: 'dependency',\n        name: ['isMember'],\n        columns: ({ isMember }) => {\n          if (isMember) {\n            return [\n              {\n                title: '\u4f1a\u5458\u7b49\u7ea7',\n                dataIndex: 'gradeId,gradeName',\n                valueType: 'select',\n                fieldProps: {\n                  labelInValue: true,\n                  options: [\n                    { value: '1', label: 'A' },\n                    { value: '2', label: 'B' },\n                  ],\n                },\n              },\n            ];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];",Ue="import { SchemaForm, ProForm, Button } from 'react-admin-kit';\nimport { columns } from './columns';\nimport { useRef } from 'react';\n\nimport type { ProFormInstance } from 'react-admin-kit';\n\nconst ConventionValueBaseName = () => {\n  const formRef = useRef<ProFormInstance>();\n\n  const onFinish = (values: any) => {\n    console.log({ values });\n  };\n\n  return (\n    <ProForm\n      onFinish={onFinish}\n      formRef={formRef}\n      autoFocusFirstInput={false}\n      submitter={false}\n      initialValues={{\n        info: {\n          name: 'tom',\n          deptId: '3',\n          deptName: '\u9500\u552e\u90e8',\n          isMember: 1,\n          gradeId: '2',\n          gradeName: 'B',\n        },\n      }}\n    >\n      <SchemaForm embed valueBaseName=\"info\" columns={columns} />\n\n      <div style={{ textAlign: 'end' }}>\n        <Button\n          style={{ marginRight: '10px' }}\n          onClick={() =>\n            formRef.current?.setFieldsValue({\n              info: {\n                name: 'jack',\n                deptId: '2',\n                deptName: '\u6280\u672f\u90e8',\n                isMember: 1,\n                gradeId: '1',\n                gradeName: 'A',\n              },\n            })\n          }\n        >\n          \u8d4b\u503c\n        </Button>\n        <Button\n          style={{ marginRight: '10px' }}\n          onClick={() => formRef.current?.resetFields([['info', 'deptId,deptName']])}\n        >\n          \u91cd\u7f6e\u90e8\u95e8\n        </Button>\n        <Button\n          style={{ marginRight: '10px' }}\n          onClick={() =>\n            formRef.current?.resetFields([\n              ['info', 'deptId,deptName'],\n              ['info', 'gradeId,gradeName'],\n            ])\n          }\n        >\n          \u91cd\u7f6e\u90e8\u95e8\u7b49\u7ea7\n        </Button>\n        <Button style={{ marginRight: '10px' }} onClick={() => formRef.current?.resetFields()}>\n          \u91cd\u7f6e\u6240\u6709\n        </Button>\n        <Button type=\"primary\" onClick={() => formRef.current?.submit()}>\n          \u63d0\u4ea4\n        </Button>\n      </div>\n    </ProForm>\n  );\n};\n\nexport default ConventionValueBaseName;",Oe="export const columns = [\n  {\n    title: '\u57fa\u672c\u4fe1\u606f - \u5185\u5d4c\u6a21\u5f0f(valueBaseName)',\n    valueType: 'group',\n    columns: [\n      {\n        title: '\u7528\u6237\u540d',\n        dataIndex: 'name',\n      },\n      {\n        title: '\u90e8\u95e8',\n        dataIndex: 'deptId,deptName',\n        valueType: 'treeSelect',\n        width: 'sm',\n        fieldProps: {\n          placeholder: '\u8bf7\u9009\u62e9',\n          labelInValue: true,\n          options: [\n            {\n              value: '1',\n              label: 'A\u516c\u53f8',\n              children: [\n                { value: '2', label: '\u6280\u672f\u90e8' },\n                { value: '3', label: '\u9500\u552e\u90e8' },\n              ],\n            },\n          ],\n        },\n      },\n      {\n        title: '\u4f1a\u5458',\n        dataIndex: 'isMember',\n        valueType: 'radio',\n        fieldProps: {\n          options: [\n            { label: '\u5426', value: 0 },\n            { label: '\u662f', value: 1 },\n          ],\n        },\n      },\n      {\n        valueType: 'dependency',\n        name: [['info', 'isMember']],\n        columns: ({ info: { isMember } }) => {\n          if (isMember) {\n            return [\n              {\n                title: '\u4f1a\u5458\u7b49\u7ea7',\n                dataIndex: 'gradeId,gradeName',\n                valueType: 'select',\n                fieldProps: {\n                  labelInValue: true,\n                  options: [\n                    { value: '1', label: 'A' },\n                    { value: '2', label: 'B' },\n                  ],\n                },\n              },\n            ];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];",Ve="import type { ProFormColumnsType, ProFormInstance } from '@ant-design/pro-form';\nimport { BetaSchemaForm } from '@ant-design/pro-form';\nimport { SchemaForm } from 'react-admin-kit';\nimport { Button } from 'antd';\nimport { useRef } from 'react';\n\ntype DataItem = {\n  name: string;\n  state: string;\n};\n\nconst columns: ProFormColumnsType<DataItem>[] = [\n  {\n    title: 'name',\n    dataIndex: 'name',\n    colProps: { span: 8 },\n  },\n  {\n    title: 'code',\n    dataIndex: 'code',\n    colProps: { span: 8 },\n  },\n];\n\nexport default () => {\n  const formRef = useRef<ProFormInstance>();\n  return (\n    <div>\n      <BetaSchemaForm\n        initialValues={{ name: 'hi' }}\n        formRef={formRef}\n        onFinish={async (values) => {\n          console.log(values);\n        }}\n        columns={columns}\n      />\n      <Button\n        onClick={() => {\n          const isTouched = formRef.current?.isFieldsTouched();\n          alert(isTouched);\n        }}\n      >\n        isTouch\n      </Button>\n    </div>\n  );\n};",_e="import { SettingProvider } from 'react-admin-kit';\r\n\r\nimport Example from '../../coreComponents/ProTable/basic';\r\n\r\nconst Basic = () => {\r\n  return (\r\n    <SettingProvider\r\n      proTableSetting={{\r\n        size: 'middle',\r\n        searchConfig: { defaultCollapsed: false },\r\n        modalProps: { width: 680 },\r\n        formProps: {\r\n          grid: true,\r\n          rowProps: { gutter: [24, 0] },\r\n          colProps: { span: 12 },\r\n        },\r\n      }}\r\n    >\r\n      <Example />\r\n    </SettingProvider>\r\n  );\r\n};\r\n\r\nexport default Basic;",je="import { SettingProvider } from 'react-admin-kit';\r\nimport Example from '../../coreComponents/ModalForm/basic';\r\n\r\nconst ModalDemo = () => {\r\n  return (\r\n    <SettingProvider\r\n      modalFormSetting={{ formProps: { layout: 'horizontal', labelCol: { span: 4 } } }}\r\n    >\r\n      <Example />\r\n    </SettingProvider>\r\n  );\r\n};\r\n\r\nexport default ModalDemo;",ze="import { SettingProvider } from 'react-admin-kit';\nimport Example from '../../coreComponents/SchemaForm/basic';\n\nconst SchemaFormDemo = () => {\n  return (\n    <SettingProvider schemaFormSetting={{ validateMessages: { required: '${label}\u4e3a\u5fc5\u586b\u9879' } }}>\n      <Example />\n    </SettingProvider>\n  );\n};\n\nexport default SchemaFormDemo;",Ke="import { SettingProvider } from 'react-admin-kit';\nimport Example from '../../components/FormUpload/basic';\n\nconst SchemaFormDemo = () => {\n  return (\n    <SettingProvider formUploadSetting={{ headers: { authorization: 'authorization-text' } }}>\n      <Example />\n    </SettingProvider>\n  );\n};\n\nexport default SchemaFormDemo;",Ye={"businessselect-basic":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,60123));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:d},"query.ts":{import:"./query",content:u}},dependencies:{"react-admin-kit":{version:"0.2.2"}},identifier:"businessselect-basic"}},"businessselect-onequery":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,31435));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:c},"basic/index.tsx":{import:"../basic",content:d},"query.ts":{import:"./query",content:u}},dependencies:{"react-admin-kit":{version:"0.2.2"}},identifier:"businessselect-onequery"}},"businessselect-queryparams":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,74163));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:m},"basic/index.tsx":{import:"../basic",content:d},"query.ts":{import:"./query",content:u}},dependencies:{"react-admin-kit":{version:"0.2.2"}},identifier:"businessselect-queryparams"}},"businessselect-clearcache":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,22861));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:p},"basic/index.tsx":{import:"../basic",content:d},"query.ts":{import:"./query",content:u}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"businessselect-clearcache"}},"businesstreeselect-basic":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,22449));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:f},"query.ts":{import:"./query",content:h}},dependencies:{"react-admin-kit":{version:"0.2.2"}},identifier:"businesstreeselect-basic"}},"businesstreeselect-clearcache":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,78385));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:g},"basic/index.tsx":{import:"../basic",content:f},"query.ts":{import:"./query",content:h}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"businesstreeselect-clearcache"}},"button-basic":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,52831));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:y}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"button-basic"}},"formupload-basic":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,80101));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:v}},dependencies:{react:{version:"17.0.2"},"react-admin-kit":{version:"0.2.2"}},identifier:"formupload-basic"}},"formupload-errorhandle":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,96849));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:b}},dependencies:{antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-admin-kit":{version:"0.2.2"},"react-dom":{version:">=16.9.0"}},identifier:"formupload-errorhandle"}},"formupload-show":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,24249));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:x}},dependencies:{react:{version:"17.0.2"},"react-admin-kit":{version:"0.2.2"}},identifier:"formupload-show"}},"formupload-datasubmit":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,538));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:F}},dependencies:{react:{version:"17.0.2"},"react-admin-kit":{version:"0.2.2"}},identifier:"formupload-datasubmit"}},"formupload-changekey":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,40218));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:R}},dependencies:{react:{version:"17.0.2"},"react-admin-kit":{version:"0.2.2"}},identifier:"formupload-changekey"}},"linkbutton-basic":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,98636));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:P}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"linkbutton-basic"}},"modalform-basic":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,88894));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:T},"columns.ts":{import:"./columns",content:w}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"modalform-basic"}},"modalform-multiplecol":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,3828));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:I},"columns.ts":{import:"./columns",content:k}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"modalform-multiplecol"}},"modalform-longform":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,65416));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:E},"columns.ts":{import:"./columns",content:C}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"modalform-longform"}},"modalform-innerref":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,51430));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:M},"columns.ts":{import:"./columns",content:H}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"modalform-innerref"}},"modalform-onopen":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,32690));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:S},"columns.ts":{import:"./columns",content:B}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"modalform-onopen"}},"modalform-initvalue":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,59561));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:L},"columns.tsx":{import:"./columns",content:q}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"modalform-initvalue"}},"modalform-readonly":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,92787));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:D},"columns.ts":{import:"./columns",content:A}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"modalform-readonly"}},"modalform-onfinish":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,21476));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Z},"columns.ts":{import:"./columns",content:N}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"modalform-onfinish"}},"modalform-convention":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,5362));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:U},"columns.ts":{import:"./columns",content:O}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"modalform-convention"}},"protable-basic":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,74475));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:V},"apis.ts":{import:"./apis",content:_},"columns.tsx":{import:"./columns",content:j}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},identifier:"protable-basic"}},"protable-rendertext":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,78190));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:z},"basic/apis.ts":{import:"./apis",content:_}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"protable-rendertext"}},"protable-modalformlayout":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,64242));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:K},"apis.ts":{import:"./apis",content:Y},"columns.tsx":{import:"./columns",content:W}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},identifier:"protable-modalformlayout"}},"protable-readonly":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,92399));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:G},"apis.ts":{import:"./apis",content:J},"columns.tsx":{import:"./columns",content:Q}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},identifier:"protable-readonly"}},"protable-onopen":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,739));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:$},"apis.ts":{import:"./apis",content:X},"columns.tsx":{import:"./columns",content:ee}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},identifier:"protable-onopen"}},"protable-onfinish":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,23442));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ne},"apis.ts":{import:"./apis",content:te},"columns.tsx":{import:"./columns",content:re}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},identifier:"protable-onfinish"}},"protable-controlled":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,63841));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ie},"columns.tsx":{import:"./columns",content:oe}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},immer:{version:"9.0.15"},"react-dom":{version:">=16.9.0"}},identifier:"protable-controlled"}},"protable-export":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,81009));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ae},"basic/apis.ts":{import:"./apis",content:_},"columns.tsx":{import:"./columns",content:se}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"protable-export"}},"protable-convention":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,14424));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:le},"apis.ts":{import:"./apis",content:de},"columns.tsx":{import:"./columns",content:ue}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},identifier:"protable-convention"}},"protable-innerrefdata":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,24405));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ce},"apis.ts":{import:"./apis",content:me},"columns.tsx":{import:"./columns",content:pe}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},identifier:"protable-innerrefdata"}},"schemaform-basic":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,38350));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:fe},"columns.ts":{import:"./columns",content:he}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-basic"}},"schemaform-horizontal":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,4399));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ge},"columns.ts":{import:"./columns",content:ye}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-horizontal"}},"schemaform-grid":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,61594));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ve},"columns.ts":{import:"./columns",content:be}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-grid"}},"schemaform-gridhorizontal":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,70769));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:xe},"columns.tsx":{import:"./columns",content:Fe}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-gridhorizontal"}},"schemaform-placeholder":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,90797));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Re},"columns.ts":{import:"./columns",content:Pe}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-placeholder"}},"schemaform-readonly":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,28776));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Te},"columns.ts":{import:"./columns",content:we}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"schemaform-readonly"}},"schemaform-dependency":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,81570));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Ie}},dependencies:{"react-admin-kit":{version:"0.2.2"}},identifier:"schemaform-dependency"}},"schemaform-initvalue":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,78370));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ke},"columns.tsx":{import:"./columns",content:Ee}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-initvalue"}},"schemaform-embed":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,17688));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Ce},"baseColumns.ts":{import:"./baseColumns",content:Me},"businessColumns.tsx":{import:"./businessColumns",content:He}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-embed"}},"schemaform-group":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,52945));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Se},"columns.ts":{import:"./columns",content:Be}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-group"}},"schemaform-groupgrid":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,26240));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Le},"columns.ts":{import:"./columns",content:qe}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-groupgrid"}},"schemaform-groupgridhorizontal":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,73386));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:De},"columns.tsx":{import:"./columns",content:Ae}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-groupgridhorizontal"}},"schemaform-convention":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,12980));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Ze},"columns.ts":{import:"./columns",content:Ne}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"schemaform-convention"}},"schemaform-conventionvaluebasename":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,8577));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Ue},"columns.ts":{import:"./columns",content:Oe}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"schemaform-conventionvaluebasename"}},"schemaform-touch":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,32026));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Ve}},dependencies:{"@ant-design/pro-form":{version:"2.2.14"},antd:{version:">=4.20.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"@types/lodash.merge":{version:"^4.6.7"},"rc-field-form":{version:"^1.22.0"},"react-dom":{version:">=16.9.0"}},identifier:"schemaform-touch"}},"settingprovider-table":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,41678));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:_e},"coreComponents/ProTable/basic/index.tsx":{import:"../../coreComponents/ProTable/basic",content:V},"apis.ts":{import:"./apis",content:_},"columns.tsx":{import:"./columns",content:j}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:">=16.9.0"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},identifier:"settingprovider-table"}},"settingprovider-modalform":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,33681));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:je},"coreComponents/ModalForm/basic/index.tsx":{import:"../../coreComponents/ModalForm/basic",content:T},"columns.ts":{import:"./columns",content:w}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"settingprovider-modalform"}},"settingprovider-schemaform":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,40448));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ze},"coreComponents/SchemaForm/basic/index.tsx":{import:"../../coreComponents/SchemaForm/basic",content:fe},"columns.ts":{import:"./columns",content:he}},dependencies:{"react-admin-kit":{version:"0.2.2"},antd:{version:"4.24.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"settingprovider-schemaform"}},"settingprovider-formupload":{component:(0,l.D8)({loader:function(){var e=(0,s.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(337),t.e(263),t.e(50)]).then(t.bind(t,22510));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Ke},"components/FormUpload/basic/index.tsx":{import:"../../components/FormUpload/basic",content:v}},dependencies:{"react-admin-kit":{version:"0.2.2"},react:{version:"17.0.2"}},identifier:"settingprovider-formupload"}}},We=JSON.parse('{"BusinessSelectBuilder":{"default":[{"identifier":"apis","description":"\u5b9a\u4e49\u6240\u6709\u7684\u4e1a\u52a1\u4e0b\u62c9;","type":"ApiType[]","default":"[]"},{"identifier":"defaultProps","description":"\u9ed8\u8ba4\u5c5e\u6027;","type":"Omit<BusinessSelectProps<string>, \\"type\\">","default":"{}"}],"SelectName":[],"clearSelectCache":[{"identifier":"toString","description":"Returns a string representation of a string.","type":"() => string"},{"identifier":"charAt","description":"Returns the character at the specified index.\\n@param pos The zero-based index of the desired character.","type":"(pos: number) => string","required":true},{"identifier":"charCodeAt","description":"Returns the Unicode value of the character at the specified location.\\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.","type":"(index: number) => number","required":true},{"identifier":"concat","description":"Returns a string that contains the concatenation of two or more strings.\\n@param strings The strings to append to the end of the string.","type":"(...strings: string[]) => string","required":true},{"identifier":"indexOf","description":"Returns the position of the first occurrence of a substring.\\n@param searchString The substring to search for in the string\\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.","type":"(searchString: string, position?: number) => number","required":true},{"identifier":"lastIndexOf","description":"Returns the last occurrence of a substring in the string.\\n@param searchString The substring to search for.\\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.","type":"(searchString: string, position?: number) => number","required":true},{"identifier":"localeCompare","description":"Determines whether two strings are equivalent in the current locale.\\nDetermines whether two strings are equivalent in the current or specified locale.\\n@param that String to compare to target string\\n@param that String to compare to target string\\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.","type":"{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }","required":true},{"identifier":"match","description":"Matches a string with a regular expression, and returns an array containing the results of that search.\\nMatches a string or an object that supports being matched against, and returns an array\\ncontaining the results of that search, or null if no matches are found.\\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\\n@param matcher An object that supports being matched against.","type":"{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }","required":true},{"identifier":"replace","description":"Replaces text in a string, using a regular expression or search string.\\nReplaces first match with string or all matches with RegExp.\\nReplaces text in a string, using an object that supports replacement within a string.\\n@param searchValue A string to search for.\\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\\n@param searchValue A string to search for.\\n@param replacer A function that returns the replacement text.\\n@param searchValue A string or RegExp search value.\\n@param replaceValue A string containing the text to replace for match.\\n@param searchValue A object can search for and replace matches within a string.\\n@param replacer A function that returns the replacement text.","type":"{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }","required":true},{"identifier":"search","description":"Finds the first substring match in a regular expression search.\\n@param regexp The regular expression pattern and applicable flags.\\n@param searcher An object which supports searching within a string.","type":"{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }","required":true},{"identifier":"slice","description":"Returns a section of a string.\\n@param start The index to the beginning of the specified portion of stringObj.\\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\\nIf this value is not specified, the substring continues to the end of stringObj.","type":"(start?: number, end?: number) => string","required":true},{"identifier":"split","description":"Split a string into substrings using the specified separator and return them as an array.\\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\\n@param limit A value used to limit the number of elements returned in the array.\\n@param splitter An object that can split a string.\\n@param limit A value used to limit the number of elements returned in the array.","type":"{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }","required":true},{"identifier":"substring","description":"Returns the substring at the specified location within a String object.\\n@param start The zero-based index number indicating the beginning of the substring.\\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\\nIf end is omitted, the characters from start through the end of the original string are returned.","type":"(start: number, end?: number) => string","required":true},{"identifier":"toLowerCase","description":"Converts all the alphabetic characters in a string to lowercase.","type":"() => string","required":true},{"identifier":"toLocaleLowerCase","description":"Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale.","type":"(locales?: string | string[]) => string","required":true},{"identifier":"toUpperCase","description":"Converts all the alphabetic characters in a string to uppercase.","type":"() => string","required":true},{"identifier":"toLocaleUpperCase","description":"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale.","type":"(locales?: string | string[]) => string","required":true},{"identifier":"trim","description":"Removes the leading and trailing white space and line terminator characters from a string.","type":"() => string","required":true},{"identifier":"length","description":"Returns the length of a String object.","type":"number","required":true},{"identifier":"substr","description":"Gets a substring beginning at the specified location and having the specified length.\\n@deprecated A legacy feature for browser compatibility\\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\\n@param length The number of characters to include in the returned substring.","type":"(from: number, length?: number) => string","required":true},{"identifier":"valueOf","description":"Returns the primitive value of the specified object.","type":"() => string"},{"identifier":"codePointAt","description":"Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\\nthe String resulting from converting this object to a String.\\nIf there is no element at that position, the result is undefined.\\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.","type":"(pos: number) => number","required":true},{"identifier":"includes","description":"Returns true if searchString appears as a substring of the result of converting this\\nobject to a String, at one or more positions that are\\ngreater than or equal to position; otherwise, returns false.\\n@param searchString search string\\n@param position If position is undefined, 0 is assumed, so as to search all of the String.","type":"(searchString: string, position?: number) => boolean","required":true},{"identifier":"endsWith","description":"Returns true if the sequence of elements of searchString converted to a String is the\\nsame as the corresponding elements of this object (converted to a String) starting at\\nendPosition \u2013 length(this). Otherwise returns false.","type":"(searchString: string, endPosition?: number) => boolean","required":true},{"identifier":"normalize","description":"Returns the String value result of normalizing the string into the normalization form\\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\\n@param form Applicable values: \\"NFC\\", \\"NFD\\", \\"NFKC\\", or \\"NFKD\\", If not specified default\\nis \\"NFC\\"\\n@param form Applicable values: \\"NFC\\", \\"NFD\\", \\"NFKC\\", or \\"NFKD\\", If not specified default\\nis \\"NFC\\"","type":"{ (form: \\"NFC\\" | \\"NFD\\" | \\"NFKC\\" | \\"NFKD\\"): string; (form?: string): string; }","required":true},{"identifier":"repeat","description":"Returns a String value that is made from count copies appended together. If count is 0,\\nthe empty string is returned.\\n@param count number of copies to append","type":"(count: number) => string","required":true},{"identifier":"startsWith","description":"Returns true if the sequence of elements of searchString converted to a String is the\\nsame as the corresponding elements of this object (converted to a String) starting at\\nposition. Otherwise returns false.","type":"(searchString: string, position?: number) => boolean","required":true},{"identifier":"anchor","description":"Returns an `<a>` HTML anchor element and sets the name attribute to the text value\\n@deprecated A legacy feature for browser compatibility\\n@param name","type":"(name: string) => string","required":true},{"identifier":"big","description":"Returns a `<big>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"blink","description":"Returns a `<blink>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"bold","description":"Returns a `<b>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"fixed","description":"Returns a `<tt>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"fontcolor","description":"Returns a `<font>` HTML element and sets the color attribute value\\n@deprecated A legacy feature for browser compatibility","type":"(color: string) => string","required":true},{"identifier":"fontsize","description":"Returns a `<font>` HTML element and sets the size attribute value\\n@deprecated A legacy feature for browser compatibility\\n@deprecated A legacy feature for browser compatibility","type":"{ (size: number): string; (size: string): string; }","required":true},{"identifier":"italics","description":"Returns an `<i>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"link","description":"Returns an `<a>` HTML element and sets the href attribute value\\n@deprecated A legacy feature for browser compatibility","type":"(url: string) => string","required":true},{"identifier":"small","description":"Returns a `<small>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"strike","description":"Returns a `<strike>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"sub","description":"Returns a `<sub>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"sup","description":"Returns a `<sup>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"padStart","description":"Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\nThe padding is applied from the start (left) of the current string.\\n@param maxLength The length of the resulting string once the current string has been padded.\\nIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\\n@param fillString The string to pad the current string with.\\nIf this string is too long, it will be truncated and the left-most part will be applied.\\nThe default value for this parameter is \\" \\" (U+0020).","type":"(maxLength: number, fillString?: string) => string","required":true},{"identifier":"padEnd","description":"Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\nThe padding is applied from the end (right) of the current string.\\n@param maxLength The length of the resulting string once the current string has been padded.\\nIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\\n@param fillString The string to pad the current string with.\\nIf this string is too long, it will be truncated and the left-most part will be applied.\\nThe default value for this parameter is \\" \\" (U+0020).","type":"(maxLength: number, fillString?: string) => string","required":true},{"identifier":"trimEnd","description":"Removes the trailing white space and line terminator characters from a string.","type":"() => string","required":true},{"identifier":"trimStart","description":"Removes the leading white space and line terminator characters from a string.","type":"() => string","required":true},{"identifier":"trimLeft","description":"Removes the leading white space and line terminator characters from a string.\\n@deprecated A legacy feature for browser compatibility. Use `trimStart` instead","type":"() => string","required":true},{"identifier":"trimRight","description":"Removes the trailing white space and line terminator characters from a string.\\n@deprecated A legacy feature for browser compatibility. Use `trimEnd` instead","type":"() => string","required":true},{"identifier":"matchAll","description":"Matches a string with a regular expression, and returns an iterable of matches\\ncontaining the results of that search.\\n@param regexp A variable name or string literal containing the regular expression pattern and flags.","type":"(regexp: RegExp) => IterableIterator<RegExpMatchArray>","required":true},{"identifier":"__@iterator@10","description":"Iterator","type":"() => IterableIterator<string>","required":true},{"identifier":"at","description":"Takes an integer value and returns the item at that index,\\nallowing for positive and negative integers.\\nNegative integers count back from the last item in the array.","type":"(index: number) => string","required":true}],"Api":[{"identifier":"api","description":"\u83b7\u53d6\u4e0b\u62c9\u6570\u636e\u7684\u63a5\u53e3","type":"(ApiParamsType: any) => Promise<{ data: any; }>","default":"-","required":true},{"identifier":"type","description":"\u4e0b\u62c9\u9009\u62e9\u7684\u540d\u5b57","type":"string","default":"-","required":true},{"identifier":"pagination","description":"\u662f\u5426\u5206\u9875","type":"boolean","default":"false"},{"identifier":"defaultProps","description":"\u9ed8\u8ba4\u5c5e\u6027, \u4f18\u5148\u7ea7\u66f4\u9ad8","type":"Omit<BusinessSelectProps<string>, \\"type\\">","default":"\'-\'"}],"Self":[{"identifier":"type","description":"Builder\u4e2d\u5b9a\u4e49\u7684\u4e0b\u62c9\u9009\u62e9\u7684\u540d\u5b57","type":"string","default":"-","required":true},{"identifier":"labelKey","description":"label\u7684\u8bfb\u53d6\u5b57\u6bb5. \u4f18\u5148\u7ea7\u9ad8\u4e8ebuilder\u4e2d\u7684labelKey","type":"string","default":"name"},{"identifier":"valueKey","description":"value\u7684\u8bfb\u53d6\u5b57\u6bb5. \u4f18\u5148\u7ea7\u9ad8\u4e8ebuilder\u4e2d\u7684valueKey","type":"string","default":"id"},{"identifier":"queryParams","description":"\u67e5\u8be2\u63a5\u53e3\u7684\u53c2\u6570. \u7528\u6cd5\u89c1\u793a\u4f8b","type":"Record<string, any>"},{"identifier":"renderLabel","description":"\u81ea\u5b9a\u4e49\u6587\u672c\u663e\u793a","type":"(node: any) => any","default":"-"},{"identifier":"onChange","type":"(val: any, option: any) => void"},{"identifier":"noCache","description":"\u4e0d\u7f13\u5b58\u6570\u636e(\u4f18\u5148\u7ea7\u66f4\u9ad8)","type":"boolean","default":"false"}]},"BusinessTreeSelectBuilder":{"default":[{"identifier":"apis","description":"\u5b9a\u4e49\u6240\u6709\u7684\u4e1a\u52a1\u4e0b\u62c9;","type":"ApiType[]","default":"[]"},{"identifier":"defaultProps","description":"\u9ed8\u8ba4\u5c5e\u6027;","type":"Omit<BusinessTreeSelectProps<string>, \\"type\\">","default":"{}"}],"CacheName":[],"clearTreeSelectCache":[{"identifier":"toString","description":"Returns a string representation of a string.","type":"() => string"},{"identifier":"charAt","description":"Returns the character at the specified index.\\n@param pos The zero-based index of the desired character.","type":"(pos: number) => string","required":true},{"identifier":"charCodeAt","description":"Returns the Unicode value of the character at the specified location.\\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.","type":"(index: number) => number","required":true},{"identifier":"concat","description":"Returns a string that contains the concatenation of two or more strings.\\n@param strings The strings to append to the end of the string.","type":"(...strings: string[]) => string","required":true},{"identifier":"indexOf","description":"Returns the position of the first occurrence of a substring.\\n@param searchString The substring to search for in the string\\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.","type":"(searchString: string, position?: number) => number","required":true},{"identifier":"lastIndexOf","description":"Returns the last occurrence of a substring in the string.\\n@param searchString The substring to search for.\\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.","type":"(searchString: string, position?: number) => number","required":true},{"identifier":"localeCompare","description":"Determines whether two strings are equivalent in the current locale.\\nDetermines whether two strings are equivalent in the current or specified locale.\\n@param that String to compare to target string\\n@param that String to compare to target string\\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.","type":"{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }","required":true},{"identifier":"match","description":"Matches a string with a regular expression, and returns an array containing the results of that search.\\nMatches a string or an object that supports being matched against, and returns an array\\ncontaining the results of that search, or null if no matches are found.\\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\\n@param matcher An object that supports being matched against.","type":"{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }","required":true},{"identifier":"replace","description":"Replaces text in a string, using a regular expression or search string.\\nReplaces first match with string or all matches with RegExp.\\nReplaces text in a string, using an object that supports replacement within a string.\\n@param searchValue A string to search for.\\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\\n@param searchValue A string to search for.\\n@param replacer A function that returns the replacement text.\\n@param searchValue A string or RegExp search value.\\n@param replaceValue A string containing the text to replace for match.\\n@param searchValue A object can search for and replace matches within a string.\\n@param replacer A function that returns the replacement text.","type":"{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }","required":true},{"identifier":"search","description":"Finds the first substring match in a regular expression search.\\n@param regexp The regular expression pattern and applicable flags.\\n@param searcher An object which supports searching within a string.","type":"{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }","required":true},{"identifier":"slice","description":"Returns a section of a string.\\n@param start The index to the beginning of the specified portion of stringObj.\\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\\nIf this value is not specified, the substring continues to the end of stringObj.","type":"(start?: number, end?: number) => string","required":true},{"identifier":"split","description":"Split a string into substrings using the specified separator and return them as an array.\\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\\n@param limit A value used to limit the number of elements returned in the array.\\n@param splitter An object that can split a string.\\n@param limit A value used to limit the number of elements returned in the array.","type":"{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }","required":true},{"identifier":"substring","description":"Returns the substring at the specified location within a String object.\\n@param start The zero-based index number indicating the beginning of the substring.\\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\\nIf end is omitted, the characters from start through the end of the original string are returned.","type":"(start: number, end?: number) => string","required":true},{"identifier":"toLowerCase","description":"Converts all the alphabetic characters in a string to lowercase.","type":"() => string","required":true},{"identifier":"toLocaleLowerCase","description":"Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale.","type":"(locales?: string | string[]) => string","required":true},{"identifier":"toUpperCase","description":"Converts all the alphabetic characters in a string to uppercase.","type":"() => string","required":true},{"identifier":"toLocaleUpperCase","description":"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale.","type":"(locales?: string | string[]) => string","required":true},{"identifier":"trim","description":"Removes the leading and trailing white space and line terminator characters from a string.","type":"() => string","required":true},{"identifier":"length","description":"Returns the length of a String object.","type":"number","required":true},{"identifier":"substr","description":"Gets a substring beginning at the specified location and having the specified length.\\n@deprecated A legacy feature for browser compatibility\\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\\n@param length The number of characters to include in the returned substring.","type":"(from: number, length?: number) => string","required":true},{"identifier":"valueOf","description":"Returns the primitive value of the specified object.","type":"() => string"},{"identifier":"codePointAt","description":"Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\\nthe String resulting from converting this object to a String.\\nIf there is no element at that position, the result is undefined.\\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.","type":"(pos: number) => number","required":true},{"identifier":"includes","description":"Returns true if searchString appears as a substring of the result of converting this\\nobject to a String, at one or more positions that are\\ngreater than or equal to position; otherwise, returns false.\\n@param searchString search string\\n@param position If position is undefined, 0 is assumed, so as to search all of the String.","type":"(searchString: string, position?: number) => boolean","required":true},{"identifier":"endsWith","description":"Returns true if the sequence of elements of searchString converted to a String is the\\nsame as the corresponding elements of this object (converted to a String) starting at\\nendPosition \u2013 length(this). Otherwise returns false.","type":"(searchString: string, endPosition?: number) => boolean","required":true},{"identifier":"normalize","description":"Returns the String value result of normalizing the string into the normalization form\\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\\n@param form Applicable values: \\"NFC\\", \\"NFD\\", \\"NFKC\\", or \\"NFKD\\", If not specified default\\nis \\"NFC\\"\\n@param form Applicable values: \\"NFC\\", \\"NFD\\", \\"NFKC\\", or \\"NFKD\\", If not specified default\\nis \\"NFC\\"","type":"{ (form: \\"NFC\\" | \\"NFD\\" | \\"NFKC\\" | \\"NFKD\\"): string; (form?: string): string; }","required":true},{"identifier":"repeat","description":"Returns a String value that is made from count copies appended together. If count is 0,\\nthe empty string is returned.\\n@param count number of copies to append","type":"(count: number) => string","required":true},{"identifier":"startsWith","description":"Returns true if the sequence of elements of searchString converted to a String is the\\nsame as the corresponding elements of this object (converted to a String) starting at\\nposition. Otherwise returns false.","type":"(searchString: string, position?: number) => boolean","required":true},{"identifier":"anchor","description":"Returns an `<a>` HTML anchor element and sets the name attribute to the text value\\n@deprecated A legacy feature for browser compatibility\\n@param name","type":"(name: string) => string","required":true},{"identifier":"big","description":"Returns a `<big>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"blink","description":"Returns a `<blink>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"bold","description":"Returns a `<b>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"fixed","description":"Returns a `<tt>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"fontcolor","description":"Returns a `<font>` HTML element and sets the color attribute value\\n@deprecated A legacy feature for browser compatibility","type":"(color: string) => string","required":true},{"identifier":"fontsize","description":"Returns a `<font>` HTML element and sets the size attribute value\\n@deprecated A legacy feature for browser compatibility\\n@deprecated A legacy feature for browser compatibility","type":"{ (size: number): string; (size: string): string; }","required":true},{"identifier":"italics","description":"Returns an `<i>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"link","description":"Returns an `<a>` HTML element and sets the href attribute value\\n@deprecated A legacy feature for browser compatibility","type":"(url: string) => string","required":true},{"identifier":"small","description":"Returns a `<small>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"strike","description":"Returns a `<strike>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"sub","description":"Returns a `<sub>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"sup","description":"Returns a `<sup>` HTML element\\n@deprecated A legacy feature for browser compatibility","type":"() => string","required":true},{"identifier":"padStart","description":"Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\nThe padding is applied from the start (left) of the current string.\\n@param maxLength The length of the resulting string once the current string has been padded.\\nIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\\n@param fillString The string to pad the current string with.\\nIf this string is too long, it will be truncated and the left-most part will be applied.\\nThe default value for this parameter is \\" \\" (U+0020).","type":"(maxLength: number, fillString?: string) => string","required":true},{"identifier":"padEnd","description":"Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\nThe padding is applied from the end (right) of the current string.\\n@param maxLength The length of the resulting string once the current string has been padded.\\nIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\\n@param fillString The string to pad the current string with.\\nIf this string is too long, it will be truncated and the left-most part will be applied.\\nThe default value for this parameter is \\" \\" (U+0020).","type":"(maxLength: number, fillString?: string) => string","required":true},{"identifier":"trimEnd","description":"Removes the trailing white space and line terminator characters from a string.","type":"() => string","required":true},{"identifier":"trimStart","description":"Removes the leading white space and line terminator characters from a string.","type":"() => string","required":true},{"identifier":"trimLeft","description":"Removes the leading white space and line terminator characters from a string.\\n@deprecated A legacy feature for browser compatibility. Use `trimStart` instead","type":"() => string","required":true},{"identifier":"trimRight","description":"Removes the trailing white space and line terminator characters from a string.\\n@deprecated A legacy feature for browser compatibility. Use `trimEnd` instead","type":"() => string","required":true},{"identifier":"matchAll","description":"Matches a string with a regular expression, and returns an iterable of matches\\ncontaining the results of that search.\\n@param regexp A variable name or string literal containing the regular expression pattern and flags.","type":"(regexp: RegExp) => IterableIterator<RegExpMatchArray>","required":true},{"identifier":"__@iterator@4832","description":"Iterator","type":"() => IterableIterator<string>","required":true},{"identifier":"at","description":"Takes an integer value and returns the item at that index,\\nallowing for positive and negative integers.\\nNegative integers count back from the last item in the array.","type":"(index: number) => string","required":true}],"Api":[{"identifier":"api","description":"\u83b7\u53d6\u4e0b\u62c9\u6570\u636e\u7684\u63a5\u53e3","type":"() => Promise<any>","default":"\'-\'","required":true},{"identifier":"type","description":"\u4e0b\u62c9\u9009\u62e9\u7684\u540d\u5b57","type":"string","default":"\'-\'","required":true},{"identifier":"defaultProps","description":"\u9ed8\u8ba4\u5c5e\u6027, \u4f18\u5148\u7ea7\u66f4\u9ad8","type":"Omit<BusinessTreeSelectProps<string>, \\"type\\">","default":"\'-\'"}],"Self":[{"identifier":"type","description":"\u7c7b\u578b;","type":"string","required":true},{"identifier":"nodeDisabled","description":"\u7981\u7528\u67d0\u8282\u70b9;","type":"(node: any) => boolean"},{"identifier":"labelKey","description":"label\u7684\u9ed8\u8ba4\u8bfb\u53d6\u5b57\u6bb5","type":"string","default":"\'name\'"},{"identifier":"valueKey","description":"value\u7684\u9ed8\u8ba4\u8bfb\u53d6\u5b57\u6bb5","type":"string","default":"\'id\'"},{"identifier":"queryParams","description":"\u67e5\u8be2\u63a5\u53e3\u7684\u53c2\u6570. \u7528\u6cd5\u89c1\u793a\u4f8b","type":"Record<string, any>"},{"identifier":"noCache","description":"\u4e0d\u7f13\u5b58\u6570\u636e","type":"boolean","default":"false"}]},"Button":{"default":[],"Self":[{"identifier":"visible","description":"\u63a7\u5236\u6309\u94ae\u663e\u793a\u9690\u85cf","type":"boolean | (() => boolean)","default":"true"}]},"FormUpload":{"default":[{"identifier":"type","type":"UploadType"},{"identifier":"name","type":"string"},{"identifier":"defaultFileList","type":"UploadFile<any>[]"},{"identifier":"fileList","type":"UploadFile<any>[]"},{"identifier":"action","description":"\u6587\u4ef6\u4e0a\u4f20\u63a5\u53e3","type":"(string | ((file: RcFile) => string) | ((file: RcFile) => PromiseLike<string>)) & string"},{"identifier":"directory","type":"boolean"},{"identifier":"data","type":"Record<string, unknown> | ((file: UploadFile<any>) => Record<string, unknown> | Promise<Record<string, unknown>>)"},{"identifier":"method","type":"\\"POST\\" | \\"PUT\\" | \\"PATCH\\" | \\"post\\" | \\"put\\" | \\"patch\\""},{"identifier":"headers","type":"HttpRequestHeader"},{"identifier":"showUploadList","type":"boolean | ShowUploadListInterface"},{"identifier":"multiple","type":"boolean"},{"identifier":"accept","type":"string"},{"identifier":"beforeUpload","type":"(file: RcFile, FileList: RcFile[]) => BeforeUploadValueType | Promise<BeforeUploadValueType>"},{"identifier":"onChange","description":"\u6587\u4ef6\u53d8\u52a8\u540e\u7684\u56de\u8c03","type":"((info: UploadChangeParam<UploadFile<any>>) => void) & ((files: UploadFile<any>[], file: UploadFile<any>) => void)"},{"identifier":"onDrop","type":"(event: DragEvent<HTMLDivElement>) => void"},{"identifier":"listType","type":"UploadListType"},{"identifier":"className","type":"string"},{"identifier":"onPreview","type":"(file: UploadFile<any>) => void"},{"identifier":"onDownload","type":"(file: UploadFile<any>) => void"},{"identifier":"onRemove","type":"(file: UploadFile<any>) => boolean | void | Promise<boolean | void>"},{"identifier":"supportServerRender","type":"boolean"},{"identifier":"style","type":"CSSProperties"},{"identifier":"disabled","type":"boolean"},{"identifier":"prefixCls","type":"string"},{"identifier":"customRequest","type":"(options: UploadRequestOption<any>) => void"},{"identifier":"withCredentials","type":"boolean"},{"identifier":"openFileDialogOnClick","type":"boolean"},{"identifier":"locale","type":"UploadLocale"},{"identifier":"id","type":"string"},{"identifier":"previewFile","type":"PreviewFileHandler"},{"identifier":"transformFile","description":"@deprecated Please use `beforeUpload` directly","type":"TransformFileHandler"},{"identifier":"iconRender","type":"(file: UploadFile<any>, listType?: UploadListType) => ReactNode"},{"identifier":"isImageUrl","type":"(file: UploadFile<any>) => boolean"},{"identifier":"progress","type":"UploadListProgressProps"},{"identifier":"itemRender","type":"ItemRender<any>"},{"identifier":"maxCount","description":"Config max count of `fileList`. Will replace current one when `maxCount` is 1","type":"number"},{"identifier":"capture","type":"boolean | \\"user\\" | \\"environment\\""},{"identifier":"value","description":"\u6587\u4ef6\u5217\u8868. { name: string; url: string; status: string }","type":"UploadFile<any>[]"},{"identifier":"onFinish","description":"\u6587\u4ef6\u5168\u90e8\u4e0a\u4f20\u5b8c\u6210\u540e\u7684\u56de\u8c03(\u6240\u6709\u6587\u4ef6\u7684\u72b6\u6001\u90fd\u662f\u975euploading)","type":"(files: UploadFile<any>[]) => void"},{"identifier":"nameKey","description":"\u81ea\u5b9a\u4e49\u6587\u4ef6\u5217\u8868\u4e2dname\u7684\u53d6\u503c\u5b57\u6bb5","type":"string","default":"name"},{"identifier":"urlKey","description":"\u81ea\u5b9a\u4e49\u6587\u4ef6\u5217\u8868\u4e2durl\u7684\u53d6\u503c\u5b57\u6bb5","type":"string","default":"url"},{"identifier":"responseToFileList","description":"\u5904\u7406\u4e0a\u4f20\u63a5\u53e3\u8fd4\u56de\u503c, \u5c06\u5176\u5408\u5e76\u8fdbfileList","type":"(res: any) => Record<string, any>"},{"identifier":"errorHandle","description":"\u4e0a\u4f20\u5931\u8d25\u540e\u7684\u5904\u7406\u51fd\u6570","type":"(res: any) => void"}],"Self":[{"identifier":"action","description":"\u6587\u4ef6\u4e0a\u4f20\u63a5\u53e3","type":"string"},{"identifier":"value","description":"\u6587\u4ef6\u5217\u8868. { name: string; url: string; status: string }","type":"UploadFile<any>[]"},{"identifier":"onChange","description":"\u6587\u4ef6\u53d8\u52a8\u540e\u7684\u56de\u8c03","type":"(files: UploadFile<any>[], file: UploadFile<any>) => void"},{"identifier":"onFinish","description":"\u6587\u4ef6\u5168\u90e8\u4e0a\u4f20\u5b8c\u6210\u540e\u7684\u56de\u8c03(\u6240\u6709\u6587\u4ef6\u7684\u72b6\u6001\u90fd\u662f\u975euploading)","type":"(files: UploadFile<any>[]) => void"},{"identifier":"nameKey","description":"\u81ea\u5b9a\u4e49\u6587\u4ef6\u5217\u8868\u4e2dname\u7684\u53d6\u503c\u5b57\u6bb5","type":"string","default":"name"},{"identifier":"urlKey","description":"\u81ea\u5b9a\u4e49\u6587\u4ef6\u5217\u8868\u4e2durl\u7684\u53d6\u503c\u5b57\u6bb5","type":"string","default":"url"},{"identifier":"responseToFileList","description":"\u5904\u7406\u4e0a\u4f20\u63a5\u53e3\u8fd4\u56de\u503c, \u5c06\u5176\u5408\u5e76\u8fdbfileList","type":"(res: any) => Record<string, any>"},{"identifier":"errorHandle","description":"\u4e0a\u4f20\u5931\u8d25\u540e\u7684\u5904\u7406\u51fd\u6570","type":"(res: any) => void"}]},"ModalForm":{"default":[{"identifier":"visible","description":"@deprecated `visible` is deprecated which will be removed in next major version. Please use\\n`open` instead.","type":"boolean"},{"identifier":"open","description":"open\u5982\u679c\u4f20\u5165\u5219\u4e3a\u53d7\u63a7\u6a21\u5f0f; \u5982\u679copen\u6ca1\u4f20\u53ef\u4ee5\u901a\u8fc7innerRef\u6765\u6253\u5f00\u5f39\u7a97","type":"boolean & MyProColumnType<string>[]"},{"identifier":"confirmLoading","description":"\u786e\u5b9a\u6309\u94ae loading","type":"boolean"},{"identifier":"title","description":"\u6807\u9898","type":"ReactNode"},{"identifier":"closable","description":"\u662f\u5426\u663e\u793a\u53f3\u4e0a\u89d2\u7684\u5173\u95ed\u6309\u94ae","type":"boolean"},{"identifier":"onOk","description":"\u70b9\u51fb\u786e\u5b9a\u56de\u8c03","type":"(e: MouseEvent<HTMLElement, MouseEvent>) => void"},{"identifier":"onCancel","description":"\u70b9\u51fb\u6a21\u6001\u6846\u53f3\u4e0a\u89d2\u53c9\u3001\u53d6\u6d88\u6309\u94ae\u3001Props.maskClosable \u503c\u4e3a true \u65f6\u7684\u906e\u7f69\u5c42\u6216\u952e\u76d8\u6309\u4e0b Esc \u65f6\u7684\u56de\u8c03","type":"(e: MouseEvent<HTMLElement, MouseEvent>) => void"},{"identifier":"afterClose","type":"() => void"},{"identifier":"centered","description":"\u5782\u76f4\u5c45\u4e2d","type":"boolean"},{"identifier":"width","description":"\u5bbd\u5ea6","type":"string | number"},{"identifier":"footer","description":"\u5e95\u90e8\u5185\u5bb9","type":"ReactNode"},{"identifier":"okText","description":"\u786e\u8ba4\u6309\u94ae\u6587\u5b57","type":"ReactNode"},{"identifier":"okType","description":"\u786e\u8ba4\u6309\u94ae\u7c7b\u578b","type":"LegacyButtonType"},{"identifier":"cancelText","description":"\u53d6\u6d88\u6309\u94ae\u6587\u5b57","type":"ReactNode"},{"identifier":"maskClosable","description":"\u70b9\u51fb\u8499\u5c42\u662f\u5426\u5141\u8bb8\u5173\u95ed","type":"boolean"},{"identifier":"forceRender","description":"\u5f3a\u5236\u6e32\u67d3 Modal","type":"boolean"},{"identifier":"okButtonProps","type":"Partial<{ href: string; target?: string; onClick?: MouseEventHandler<HTMLElement>; } & BaseButtonProps & Omit<AnchorHTMLAttributes<any>, \\"onClick\\" | \\"type\\"> & { ...; } & Omit<...>>"},{"identifier":"cancelButtonProps","type":"Partial<{ href: string; target?: string; onClick?: MouseEventHandler<HTMLElement>; } & BaseButtonProps & Omit<AnchorHTMLAttributes<any>, \\"onClick\\" | \\"type\\"> & { ...; } & Omit<...>>"},{"identifier":"destroyOnClose","type":"boolean"},{"identifier":"style","type":"CSSProperties"},{"identifier":"wrapClassName","type":"string"},{"identifier":"maskTransitionName","type":"string"},{"identifier":"transitionName","type":"string"},{"identifier":"className","type":"string"},{"identifier":"getContainer","type":"string | false | HTMLElement | getContainerFunc"},{"identifier":"zIndex","type":"number"},{"identifier":"bodyStyle","type":"CSSProperties"},{"identifier":"maskStyle","type":"CSSProperties"},{"identifier":"mask","type":"boolean"},{"identifier":"keyboard","type":"boolean"},{"identifier":"wrapProps","type":"any"},{"identifier":"prefixCls","type":"string"},{"identifier":"closeIcon","type":"ReactNode"},{"identifier":"modalRender","type":"(node: ReactNode) => ReactNode"},{"identifier":"focusTriggerAfterClose","type":"boolean"},{"identifier":"innerRef","description":"\u975e\u53d7\u63a7\u6a21\u5f0f(\u63a8\u8350); \u5728open\u6ca1\u4f20\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7innerRef\u6765\u6253\u5f00\u5f39\u7a97; ref.current.openModal(\'new\', initialValues)","type":"MutableRefObject<ModalFormInnerRefType> | RefObject<ModalFormInnerRefType>"},{"identifier":"columns","description":"\u8868\u5355\u9879\u7684\u914d\u7f6e\u63cf\u8ff0;","type":"MyProColumnType<string>[]","required":true},{"identifier":"onFinish","description":"\u70b9\u51fb\u5f39\u7a97\u786e\u5b9a\u6309\u94ae\u540e\u7684\u56de\u8c03;","type":"(values: any, formType: FormType, formData: any) => void | Promise<any>"},{"identifier":"onOpen","description":"\u6253\u5f00\u5f39\u6846\u540e\u7684\u56de\u8c03, \u53ef\u4ee5\u5728\u8fd9\u91cc\u8bf7\u6c42\u6570\u636e;","type":"(formType: FormType, formRef: { current: FormInstance<any>; }, formData: any) => void | Promise<any>"},{"identifier":"formProps","description":"\u4f20\u9012\u7ed9\u8868\u5355\u7684\u53c2\u6570, \u8bf7\u53c2\u8003SchemaForm\u7ec4\u4ef6\u7684api","type":"SettingFormProps"},{"identifier":"confirmOnClose","description":"\u5173\u95ed\u5f39\u7a97\u65f6, \u5982\u679c\u8868\u5355\u9879\u53d1\u751f\u4e86\u6539\u52a8\u4f1a\u5f39\u51fa\u786e\u8ba4\u6846","type":"Boolean","default":"true"}],"Self":[{"identifier":"open","description":"open\u5982\u679c\u4f20\u5165\u5219\u4e3a\u53d7\u63a7\u6a21\u5f0f; \u5982\u679copen\u6ca1\u4f20\u53ef\u4ee5\u901a\u8fc7innerRef\u6765\u6253\u5f00\u5f39\u7a97","type":"MyProColumnType<string>[]"},{"identifier":"innerRef","description":"\u975e\u53d7\u63a7\u6a21\u5f0f(\u63a8\u8350); \u5728open\u6ca1\u4f20\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7innerRef\u6765\u6253\u5f00\u5f39\u7a97; ref.current.openModal(\'new\', initialValues)","type":"MutableRefObject<ModalFormInnerRefType> | RefObject<ModalFormInnerRefType>"},{"identifier":"columns","description":"\u8868\u5355\u9879\u7684\u914d\u7f6e\u63cf\u8ff0;","type":"MyProColumnType<string>[]","required":true},{"identifier":"onFinish","description":"\u70b9\u51fb\u5f39\u7a97\u786e\u5b9a\u6309\u94ae\u540e\u7684\u56de\u8c03;","type":"(values: any, formType: FormType, formData: any) => void | Promise<any>"},{"identifier":"onOpen","description":"\u6253\u5f00\u5f39\u6846\u540e\u7684\u56de\u8c03, \u53ef\u4ee5\u5728\u8fd9\u91cc\u8bf7\u6c42\u6570\u636e;","type":"(formType: FormType, formRef: { current: FormInstance<any>; }, formData: any) => void | Promise<any>"},{"identifier":"formProps","description":"\u4f20\u9012\u7ed9\u8868\u5355\u7684\u53c2\u6570, \u8bf7\u53c2\u8003SchemaForm\u7ec4\u4ef6\u7684api","type":"SettingFormProps"},{"identifier":"confirmOnClose","description":"\u5173\u95ed\u5f39\u7a97\u65f6, \u5982\u679c\u8868\u5355\u9879\u53d1\u751f\u4e86\u6539\u52a8\u4f1a\u5f39\u51fa\u786e\u8ba4\u6846","type":"Boolean","default":"true"}]},"SchemaForm":{"default":[{"identifier":"embed","description":"\u662f\u5426\u4e3a\u5185\u5d4c\u6a21\u5f0f","type":"Boolean","default":"false"},{"identifier":"valueBaseName","description":"\u5904\u7406\u5957\u5d4c\u6570\u636e\u7ed3\u6784; \u5728onFinish\u6536\u96c6\u6570\u636e\u65f6, \u4f1a\u6302\u5728\u8be5\u5b57\u6bb5\u4e0b. \u4ec5\u9002\u7528\u4e8eembed\u6a21\u5f0f","type":"String","default":"false"},{"identifier":"readonly","description":"\u4f18\u5148\u4f4e\u4e8e\u8868\u5355\u9879\u7684 readonly","type":"Boolean & boolean","default":"false"},{"identifier":"columns","description":"\u8868\u5355\u9879\u7684\u914d\u7f6e\u63cf\u8ff0;","type":"any","required":true},{"identifier":"onFinish","description":"\u8868\u5355\u63d0\u4ea4\u65f6\u7684\u56de\u8c03;","type":"(values: any) => void | Promise<boolean>"},{"identifier":"formRef","description":"\u7528\u4e8e\u83b7\u53d6form\u5b9e\u4f8b; \u8bf7\u4f7f\u7528formRef\u800c\u4e0d\u8981\u4f7f\u7528form\u5c5e\u6027\u4f20\u5165\u4e00\u4e2aform\u5b9e\u4f8b. \u56e0\u4e3a\u7ec4\u4ef6\u6709\u5bf9formRef\u8fdb\u884c\u5c01\u88c5.\\n@name \u83b7\u53d6 ProFormInstance\\n\\nProFormInstance \u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u5f53\u524d\u8868\u5355\u7684\u4e00\u4e9b\u4fe1\u606f\\n@example \u83b7\u53d6 name \u7684\u503c formRef.current.getFieldValue(\\"name\\");\\n@example \u83b7\u53d6\u6240\u6709\u7684\u8868\u5355\u503c formRef.current.getFieldsValue(true);","type":"RefObject<ProFormInstance>"},{"identifier":"acceptCharset","type":"string"},{"identifier":"autoComplete","type":"string"},{"identifier":"encType","type":"string"},{"identifier":"method","type":"string"},{"identifier":"name","type":"string"},{"identifier":"noValidate","type":"boolean"},{"identifier":"target","type":"string"},{"identifier":"rel","type":"string"},{"identifier":"defaultChecked","type":"boolean"},{"identifier":"defaultValue","type":"string | number | readonly string[]"},{"identifier":"suppressContentEditableWarning","type":"boolean"},{"identifier":"suppressHydrationWarning","type":"boolean"},{"identifier":"accessKey","type":"string"},{"identifier":"className","type":"string"},{"identifier":"contentEditable","type":"Booleanish | \\"inherit\\""},{"identifier":"contextMenu","type":"string"},{"identifier":"dir","type":"string"},{"identifier":"draggable","type":"Booleanish"},{"identifier":"hidden","type":"boolean"},{"identifier":"id","type":"string"},{"identifier":"lang","type":"string"},{"identifier":"placeholder","type":"string"},{"identifier":"slot","type":"string"},{"identifier":"spellCheck","type":"Booleanish"},{"identifier":"style","type":"CSSProperties"},{"identifier":"tabIndex","type":"number"},{"identifier":"title","type":"string"},{"identifier":"translate","type":"\\"yes\\" | \\"no\\""},{"identifier":"radioGroup","type":"string"},{"identifier":"role","type":"AriaRole"},{"identifier":"about","type":"string"},{"identifier":"datatype","type":"string"},{"identifier":"inlist","type":"any"},{"identifier":"prefix","type":"string"},{"identifier":"property","type":"string"},{"identifier":"resource","type":"string"},{"identifier":"typeof","type":"string"},{"identifier":"vocab","type":"string"},{"identifier":"autoCapitalize","type":"string"},{"identifier":"autoCorrect","type":"string"},{"identifier":"autoSave","type":"string"},{"identifier":"color","type":"string"},{"identifier":"itemProp","type":"string"},{"identifier":"itemScope","type":"boolean"},{"identifier":"itemType","type":"string"},{"identifier":"itemID","type":"string"},{"identifier":"itemRef","type":"string"},{"identifier":"results","type":"number"},{"identifier":"security","type":"string"},{"identifier":"unselectable","type":"\\"on\\" | \\"off\\""},{"identifier":"inputMode","description":"Hints at the type of data that might be entered by the user while editing the element or its contents\\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute","type":"\\"none\\" | \\"search\\" | \\"text\\" | \\"tel\\" | \\"url\\" | \\"email\\" | \\"numeric\\" | \\"decimal\\""},{"identifier":"is","description":"Specify that a standard HTML element should behave like a defined custom built-in element\\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is","type":"string"},{"identifier":"aria-activedescendant","description":"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.","type":"string"},{"identifier":"aria-atomic","description":"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.","type":"Booleanish"},{"identifier":"aria-autocomplete","description":"Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be\\npresented if they are made.","type":"\\"list\\" | \\"none\\" | \\"inline\\" | \\"both\\""},{"identifier":"aria-busy","description":"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.","type":"Booleanish"},{"identifier":"aria-checked","description":"Indicates the current \\"checked\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.","type":"boolean | \\"true\\" | \\"false\\" | \\"mixed\\""},{"identifier":"aria-colcount","description":"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.","type":"number"},{"identifier":"aria-colindex","description":"Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.","type":"number"},{"identifier":"aria-colspan","description":"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.","type":"number"},{"identifier":"aria-controls","description":"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.","type":"string"},{"identifier":"aria-current","description":"Indicates the element that represents the current item within a container or set of related elements.","type":"boolean | \\"true\\" | \\"false\\" | \\"page\\" | \\"step\\" | \\"location\\" | \\"date\\" | \\"time\\""},{"identifier":"aria-describedby","description":"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby","type":"string"},{"identifier":"aria-details","description":"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.","type":"string"},{"identifier":"aria-disabled","description":"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.","type":"Booleanish"},{"identifier":"aria-dropeffect","description":"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1","type":"\\"link\\" | \\"none\\" | \\"copy\\" | \\"execute\\" | \\"move\\" | \\"popup\\""},{"identifier":"aria-errormessage","description":"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.","type":"string"},{"identifier":"aria-expanded","description":"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.","type":"Booleanish"},{"identifier":"aria-flowto","description":"Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,\\nallows assistive technology to override the general default of reading in document source order.","type":"string"},{"identifier":"aria-grabbed","description":"Indicates an element\'s \\"grabbed\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1","type":"Booleanish"},{"identifier":"aria-haspopup","description":"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.","type":"boolean | \\"grid\\" | \\"true\\" | \\"false\\" | \\"dialog\\" | \\"listbox\\" | \\"menu\\" | \\"tree\\""},{"identifier":"aria-hidden","description":"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.","type":"Booleanish"},{"identifier":"aria-invalid","description":"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.","type":"boolean | \\"true\\" | \\"false\\" | \\"grammar\\" | \\"spelling\\""},{"identifier":"aria-keyshortcuts","description":"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.","type":"string"},{"identifier":"aria-label","description":"Defines a string value that labels the current element.\\n@see aria-labelledby.","type":"string"},{"identifier":"aria-labelledby","description":"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.","type":"string"},{"identifier":"aria-level","description":"Defines the hierarchical level of an element within a structure.","type":"number"},{"identifier":"aria-live","description":"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.","type":"\\"off\\" | \\"assertive\\" | \\"polite\\""},{"identifier":"aria-modal","description":"Indicates whether an element is modal when displayed.","type":"Booleanish"},{"identifier":"aria-multiline","description":"Indicates whether a text box accepts multiple lines of input or only a single line.","type":"Booleanish"},{"identifier":"aria-multiselectable","description":"Indicates that the user may select more than one item from the current selectable descendants.","type":"Booleanish"},{"identifier":"aria-orientation","description":"Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.","type":"\\"horizontal\\" | \\"vertical\\""},{"identifier":"aria-owns","description":"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.","type":"string"},{"identifier":"aria-placeholder","description":"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.","type":"string"},{"identifier":"aria-posinset","description":"Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.","type":"number"},{"identifier":"aria-pressed","description":"Indicates the current \\"pressed\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.","type":"boolean | \\"true\\" | \\"false\\" | \\"mixed\\""},{"identifier":"aria-readonly","description":"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.","type":"Booleanish"},{"identifier":"aria-relevant","description":"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.","type":"\\"text\\" | \\"additions\\" | \\"additions removals\\" | \\"additions text\\" | \\"all\\" | \\"removals\\" | \\"removals additions\\" | \\"removals text\\" | \\"text additions\\" | \\"text removals\\""},{"identifier":"aria-required","description":"Indicates that user input is required on the element before a form may be submitted.","type":"Booleanish"},{"identifier":"aria-roledescription","description":"Defines a human-readable, author-localized description for the role of an element.","type":"string"},{"identifier":"aria-rowcount","description":"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.","type":"number"},{"identifier":"aria-rowindex","description":"Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.","type":"number"},{"identifier":"aria-rowspan","description":"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.","type":"number"},{"identifier":"aria-selected","description":"Indicates the current \\"selected\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.","type":"Booleanish"},{"identifier":"aria-setsize","description":"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.","type":"number"},{"identifier":"aria-sort","description":"Indicates if items in a table or grid are sorted in ascending or descending order.","type":"\\"none\\" | \\"ascending\\" | \\"descending\\" | \\"other\\""},{"identifier":"aria-valuemax","description":"Defines the maximum allowed value for a range widget.","type":"number"},{"identifier":"aria-valuemin","description":"Defines the minimum allowed value for a range widget.","type":"number"},{"identifier":"aria-valuenow","description":"Defines the current value for a range widget.\\n@see aria-valuetext.","type":"number"},{"identifier":"aria-valuetext","description":"Defines the human readable text alternative of aria-valuenow for a range widget.","type":"string"},{"identifier":"dangerouslySetInnerHTML","type":"{ __html: string; }"},{"identifier":"onCopy","type":"ClipboardEventHandler<HTMLFormElement>"},{"identifier":"onCopyCapture","type":"ClipboardEventHandler<HTMLFormElement>"},{"identifier":"onCut","type":"ClipboardEventHandler<HTMLFormElement>"},{"identifier":"onCutCapture","type":"ClipboardEventHandler<HTMLFormElement>"},{"identifier":"onPaste","type":"ClipboardEventHandler<HTMLFormElement>"},{"identifier":"onPasteCapture","type":"ClipboardEventHandler<HTMLFormElement>"},{"identifier":"onCompositionEnd","type":"CompositionEventHandler<HTMLFormElement>"},{"identifier":"onCompositionEndCapture","type":"CompositionEventHandler<HTMLFormElement>"},{"identifier":"onCompositionStart","type":"CompositionEventHandler<HTMLFormElement>"},{"identifier":"onCompositionStartCapture","type":"CompositionEventHandler<HTMLFormElement>"},{"identifier":"onCompositionUpdate","type":"CompositionEventHandler<HTMLFormElement>"},{"identifier":"onCompositionUpdateCapture","type":"CompositionEventHandler<HTMLFormElement>"},{"identifier":"onFocus","type":"FocusEventHandler<HTMLFormElement>"},{"identifier":"onFocusCapture","type":"FocusEventHandler<HTMLFormElement>"},{"identifier":"onBlur","type":"FocusEventHandler<HTMLFormElement>"},{"identifier":"onBlurCapture","type":"FocusEventHandler<HTMLFormElement>"},{"identifier":"onChange","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onChangeCapture","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onBeforeInput","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onBeforeInputCapture","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onInput","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onInputCapture","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onReset","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onResetCapture","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onSubmitCapture","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onInvalid","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onInvalidCapture","type":"FormEventHandler<HTMLFormElement>"},{"identifier":"onLoad","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onLoadCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onError","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onErrorCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onKeyDown","type":"KeyboardEventHandler<HTMLFormElement>"},{"identifier":"onKeyDownCapture","type":"KeyboardEventHandler<HTMLFormElement>"},{"identifier":"onKeyPress","description":"@deprecated","type":"KeyboardEventHandler<HTMLFormElement>"},{"identifier":"onKeyPressCapture","description":"@deprecated","type":"KeyboardEventHandler<HTMLFormElement>"},{"identifier":"onKeyUp","type":"KeyboardEventHandler<HTMLFormElement>"},{"identifier":"onKeyUpCapture","type":"KeyboardEventHandler<HTMLFormElement>"},{"identifier":"onAbort","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onAbortCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onCanPlay","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onCanPlayCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onCanPlayThrough","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onCanPlayThroughCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onDurationChange","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onDurationChangeCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onEmptied","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onEmptiedCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onEncrypted","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onEncryptedCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onEnded","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onEndedCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onLoadedData","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onLoadedDataCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onLoadedMetadata","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onLoadedMetadataCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onLoadStart","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onLoadStartCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onPause","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onPauseCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onPlay","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onPlayCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onPlaying","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onPlayingCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onProgress","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onProgressCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onRateChange","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onRateChangeCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onSeeked","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onSeekedCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onSeeking","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onSeekingCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onStalled","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onStalledCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onSuspend","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onSuspendCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onTimeUpdate","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onTimeUpdateCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onVolumeChange","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onVolumeChangeCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onWaiting","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onWaitingCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onAuxClick","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onAuxClickCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onClick","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onClickCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onContextMenu","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onContextMenuCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onDoubleClick","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onDoubleClickCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onDrag","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragCapture","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragEnd","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragEndCapture","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragEnter","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragEnterCapture","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragExit","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragExitCapture","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragLeave","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragLeaveCapture","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragOver","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragOverCapture","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragStart","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDragStartCapture","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDrop","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onDropCapture","type":"DragEventHandler<HTMLFormElement>"},{"identifier":"onMouseDown","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseDownCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseEnter","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseLeave","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseMove","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseMoveCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseOut","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseOutCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseOver","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseOverCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseUp","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onMouseUpCapture","type":"MouseEventHandler<HTMLFormElement>"},{"identifier":"onSelect","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onSelectCapture","type":"ReactEventHandler<HTMLFormElement>"},{"identifier":"onTouchCancel","type":"TouchEventHandler<HTMLFormElement>"},{"identifier":"onTouchCancelCapture","type":"TouchEventHandler<HTMLFormElement>"},{"identifier":"onTouchEnd","type":"TouchEventHandler<HTMLFormElement>"},{"identifier":"onTouchEndCapture","type":"TouchEventHandler<HTMLFormElement>"},{"identifier":"onTouchMove","type":"TouchEventHandler<HTMLFormElement>"},{"identifier":"onTouchMoveCapture","type":"TouchEventHandler<HTMLFormElement>"},{"identifier":"onTouchStart","type":"TouchEventHandler<HTMLFormElement>"},{"identifier":"onTouchStartCapture","type":"TouchEventHandler<HTMLFormElement>"},{"identifier":"onPointerDown","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerDownCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerMove","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerMoveCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerUp","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerUpCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerCancel","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerCancelCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerEnter","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerEnterCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerLeave","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerLeaveCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerOver","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerOverCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerOut","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onPointerOutCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onGotPointerCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onGotPointerCaptureCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onLostPointerCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onLostPointerCaptureCapture","type":"PointerEventHandler<HTMLFormElement>"},{"identifier":"onScroll","type":"UIEventHandler<HTMLFormElement>"},{"identifier":"onScrollCapture","type":"UIEventHandler<HTMLFormElement>"},{"identifier":"onWheel","type":"WheelEventHandler<HTMLFormElement>"},{"identifier":"onWheelCapture","type":"WheelEventHandler<HTMLFormElement>"},{"identifier":"onAnimationStart","type":"AnimationEventHandler<HTMLFormElement>"},{"identifier":"onAnimationStartCapture","type":"AnimationEventHandler<HTMLFormElement>"},{"identifier":"onAnimationEnd","type":"AnimationEventHandler<HTMLFormElement>"},{"identifier":"onAnimationEndCapture","type":"AnimationEventHandler<HTMLFormElement>"},{"identifier":"onAnimationIteration","type":"AnimationEventHandler<HTMLFormElement>"},{"identifier":"onAnimationIterationCapture","type":"AnimationEventHandler<HTMLFormElement>"},{"identifier":"onTransitionEnd","type":"TransitionEventHandler<HTMLFormElement>"},{"identifier":"onTransitionEndCapture","type":"TransitionEventHandler<HTMLFormElement>"},{"identifier":"initialValues","type":"Store"},{"identifier":"component","type":"string | false | FC<any> | ComponentClass<any, any>"},{"identifier":"fields","type":"FieldData[]"},{"identifier":"validateMessages","type":"ValidateMessages"},{"identifier":"onValuesChange","type":"(changedValues: any, values: Record<string, any>) => void"},{"identifier":"onFieldsChange","type":"(changedFields: FieldData[], allFields: FieldData[]) => void"},{"identifier":"onFinishFailed","type":"(errorInfo: ValidateErrorEntity<Record<string, any>>) => void"},{"identifier":"validateTrigger","type":"string | false | string[]"},{"identifier":"preserve","type":"boolean"},{"identifier":"prefixCls","type":"string"},{"identifier":"colon","type":"boolean"},{"identifier":"layout","type":"FormLayout"},{"identifier":"labelAlign","type":"FormLabelAlign"},{"identifier":"labelWrap","type":"boolean"},{"identifier":"labelCol","type":"ColProps"},{"identifier":"wrapperCol","type":"ColProps"},{"identifier":"size","type":"SizeType"},{"identifier":"disabled","type":"boolean"},{"identifier":"scrollToFirstError","type":"boolean | Options<any>"},{"identifier":"requiredMark","type":"RequiredMark"},{"identifier":"hideRequiredMark","description":"@deprecated Will warning in future branch. Pls use `requiredMark` instead.","type":"boolean"},{"identifier":"submitter","description":"@name \u81ea\u5b9a\u4e49\u63d0\u4ea4\u7684\u914d\u7f6e\\n@example \u4e0d\u5c55\u793a\u63d0\u4ea4\u6309\u94ae\u548c\u91cd\u7f6e\u6309\u94ae\\nsubmitter={false}\\n@example \u4fee\u6539\u91cd\u7f6e\u6309\u94ae\u7684\u6837\u5f0f\uff0c\u5e76\u4e14\u9690\u85cf\u63d0\u4ea4\u6309\u94ae\\nsubmitter={{resetButtonProps: { type: \'dashed\'},submitButtonProps: { style: { display: \'none\', }}}}\\n@example \u4fee\u6539\u63d0\u4ea4\u6309\u94ae\u548c\u91cd\u7f6e\u6309\u94ae\u7684\u987a\u5e8f\\nsubmitter={{ render:(props,dom)=> [...dom.reverse()]}}\\n@example \u4fee\u6539\u63d0\u4ea4\u548c\u91cd\u7f6e\u6309\u94ae\u6587\u5b57\\nsubmitter={{ searchConfig: { submitText: \'\u63d0\u4ea42\',restText: \'\u91cd\u7f6e2\'}}}","type":"false | SubmitterProps<{ form?: FormInstance<any>; }>"},{"identifier":"syncToUrl","description":"@name \u540c\u6b65\u7ed3\u679c\u5230 url \u4e2d","type":"boolean | ((values: Record<string, any>, type: \\"get\\" | \\"set\\") => Record<string, any>)"},{"identifier":"syncToUrlAsImportant","description":"@name \u5f53 syncToUrl \u4e3a true\uff0c\u5728\u9875\u9762\u56de\u663e\u793a\u65f6\uff0c\u4ee5url\u4e0a\u7684\u53c2\u6570\u4e3a\u4e3b\uff0c\u9ed8\u8ba4\u4e3afalse","type":"boolean"},{"identifier":"extraUrlParams","description":"@name \u989d\u5916\u7684 url \u53c2\u6570 \u4e2d","type":"Record<string, any>"},{"identifier":"syncToInitialValues","description":"\u540c\u6b65\u7ed3\u679c\u5230 initialValues,\u9ed8\u8ba4\u4e3atrue\u5982\u679c\u4e3afalse\uff0creset\u7684\u65f6\u5c06\u4f1a\u5ffd\u7565\u4eceurl\u4e0a\u83b7\u53d6\u7684\u6570\u636e\\n@name \u662f\u5426\u5c06 url \u53c2\u6570\u5199\u5165 initialValues","type":"boolean"},{"identifier":"omitNil","description":"\u5982\u679c\u4e3a false,\u4f1a\u539f\u6837\u4fdd\u5b58\u3002\\n@param \u8981\u4e0d\u8981\u503c\u4e2d\u7684 Null \u548c undefined","type":"boolean","default":"true"},{"identifier":"dateFormatter","description":"\u683c\u5f0f\u5316 Date \u7684\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u8f6c\u5316\u4e3a string\\n@example dateFormatter=\\"date\\" : Moment -> YYYY-MM-DD\\n@example dateFormatter=\\"dateTime\\" Moment -> YYYY-MM-DD  HH:mm:SS\\n@example dateFormatter=\\"time\\" Moment -> HH:mm:SS\\n@example dateFormatter=false Moment -> Moment\\n@example dateFormatter={(value)=>value.format(\\"YYYY-MM-DD\\")}","type":"false | \\"string\\" | \\"number\\" | ((value: Dayjs, valueType: string) => string | number)"},{"identifier":"onInit","description":"@name \u8868\u5355\u521d\u59cb\u5316\u6210\u529f\uff0c\u6bd4\u5982\u5e03\u5c40\uff0clabel\u7b49\u8ba1\u7b97\u5b8c\u6210\\n@example (values)=>{ console.log(values) }","type":"(values: Record<string, any>, form: ProFormInstance<any>) => void"},{"identifier":"params","description":"@name \u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u53c2\u6570\\n@example params={{productId: 1}}","type":"Record<string, any>"},{"identifier":"request","description":"@name \u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u53c2\u6570,\u8fd4\u56de\u503c\u4f1a\u8986\u76d6\u7ed9 initialValues\\n@example async (params)=>{ return initialValues }","type":"ProRequestData<Record<string, any>, Record<string, any>>"},{"identifier":"isKeyPressSubmit","description":"\u662f\u5426\u56de\u8f66\u63d0\u4ea4","type":"boolean"},{"identifier":"formKey","description":"\u7528\u4e8e\u63a7\u5236form \u662f\u5426\u76f8\u540c\u7684key\uff0c\u9ad8\u9636\u7528\u6cd5","type":"string"},{"identifier":"autoFocusFirstInput","description":"\u53ea\u5bf9\u6709input\u7684\u7c7b\u578b\u6709\u6548","type":"boolean"},{"identifier":"grid","description":"open grid layout","type":"boolean","default":"false"},{"identifier":"colProps","description":"only works when grid is enabled\\n\\nWhen passing the `span` attribute, the default value is empty","type":"ColProps","default":"{ xs: 24 }"},{"identifier":"rowProps","description":"only works when grid is enabled","type":"RowProps","default":"{ gutter: 8 }"}],"Self":[{"identifier":"embed","description":"\u662f\u5426\u4e3a\u5185\u5d4c\u6a21\u5f0f","type":"Boolean","default":"false"},{"identifier":"valueBaseName","description":"\u5904\u7406\u5957\u5d4c\u6570\u636e\u7ed3\u6784; \u5728onFinish\u6536\u96c6\u6570\u636e\u65f6, \u4f1a\u6302\u5728\u8be5\u5b57\u6bb5\u4e0b. \u4ec5\u9002\u7528\u4e8eembed\u6a21\u5f0f","type":"String","default":"false"},{"identifier":"readonly","description":"\u662f\u5426\u4e3a\u53ea\u8bfb\u6a21\u5f0f","type":"Boolean","default":"false"},{"identifier":"columns","description":"\u8868\u5355\u9879\u7684\u914d\u7f6e\u63cf\u8ff0;","type":"any","required":true},{"identifier":"onFinish","description":"\u8868\u5355\u63d0\u4ea4\u65f6\u7684\u56de\u8c03;","type":"(values: any) => void | Promise<boolean>"},{"identifier":"formRef","description":"\u7528\u4e8e\u83b7\u53d6form\u5b9e\u4f8b; \u8bf7\u4f7f\u7528formRef\u800c\u4e0d\u8981\u4f7f\u7528form\u5c5e\u6027\u4f20\u5165\u4e00\u4e2aform\u5b9e\u4f8b. \u56e0\u4e3a\u7ec4\u4ef6\u6709\u5bf9formRef\u8fdb\u884c\u5c01\u88c5.","type":"RefObject<ProFormInstance>"}]},"SettingProvider":{"default":[{"identifier":"proTableSetting","description":"ProTable\u7ec4\u4ef6\u7684\u8bbe\u7f6e\u9879","type":"{ size?: \\"small\\" | \\"default\\" | \\"middle\\"; searchConfig?: SearchConfig; modalProps?: ModalProps; formProps?: SettingFormProps; }","default":"false"},{"identifier":"modalFormSetting","description":"ModalForm\u7ec4\u4ef6\u7684\u8bbe\u7f6e\u9879","type":"{ modalProps?: ModalProps; formProps?: SettingFormProps; }","default":"false"},{"identifier":"schemaFormSetting","description":"SchemaForm\u7ec4\u4ef6\u7684\u8bbe\u7f6e\u9879","type":"SettingFormProps","default":"false"},{"identifier":"formUploadSetting","description":"FormUpload\u7ec4\u4ef6\u7684\u8bbe\u7f6e\u9879","type":"UploadProps<any> & FormUploadSelfProps","default":"false"}]}}'),Ge=t(49215),Je=e=>i.createElement(Ge.Z,(0,r.Z)({},e,{config:o,demos:Ye,apis:We}))}}]);